(function (Opal) {
  function initialize (Opal) {
/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor-revealjs/converter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$nil?', '$option?', '$include?', '$join', '$map', '$split', '$!=', '$to_s', '$!', '$attr?', '$downcase', '$attr', '$inject', '$nil_or_empty?', '$is_a?', '$compact', '$<<', '$empty?', '$+', '$level', '$special', '$to_i', '$document', '$numbered', '$caption', '$<=', '$sectnum', '$captioned_title', '$strip', '$read', '$content', '$[]', '$[]=', '$-', '$lambda', '$key?', '$fetch', '$delete', '$call', '$each', '$constants', '$const_set', '$const_get', '$register_for', '$respond_to?', '$basebackend', '$outfilesuffix', '$filetype', '$supports_templates', '$create', '$backend_info', '$new', '$node_name', '$send', '$extend', '$instance_eval', '$set_local_variables', '$converter', '$binding', '$===', '$flatten', '$map!', '$to_proc', '$reject!', '$convert', '$doctype', '$puts', '$role', '$reject', '$title?', '$title', '$context', '$has_role?', '$resolve_content', '$items', '$text', '$text?', '$blocks?', '$chomp', '$last', '$attributes', '$roles', '$bool_data_attr', '$image_uri', '$zero?', '$select', '$style', '$html_tag', '$colspan', '$rowspan', '$doctitle', '$normalize_web_path', '$syntax_highlighter', '$docinfo?', '$docinfo', '$noheader', '$header?', '$media_uri', '$subtitle?', '$slice_text', '$header', '$subtitle', '$find_by', '$length', '$pop', '$author', '$to_boolean', '$to_valid_slidenumber', '$revealjs_dependencies', '$icon_uri', '$*', '$id', '$notitle', '$has_header?', '$footnotes?', '$footnotes', '$index', '$sections', '$section_level', '$first', '$section_title', '$<', '$to_sym', '$name', '$highlight?', '$format', '$size', '$each_with_index', '$blocks', '$content_for', '$yield_content', '$>=', '$sub_specialcharacters', '$start_with?', '$end_with?', '$list_marker_keyword', '$tr_s', '$references', '$role?', '$local_variable_set']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Revealjs');

      var $nesting = [self].concat($parent_nesting);

      nil
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Converter');

    var $nesting = [self].concat($parent_nesting), $Converter$17, $Converter_initialize$18, $Converter_convert$19, $Converter_handles$ques$20, $Converter_toc$21, $Converter_page_break$23, $Converter_open$25, $Converter_paragraph$27, $Converter_verse$29, $Converter_dlist$31, $Converter_inline_footnote$39, $Converter_stretch_nested_elements$41, $Converter_image$43, $Converter_inline_break$45, $Converter_preamble$47, $Converter_thematic_break$49, $Converter_quote$51, $Converter_inline_indexterm$53, $Converter_pass$55, $Converter_table$57, $Converter_document$68, $Converter_inline_callout$71, $Converter_notes$73, $Converter_inline_image$75, $Converter_video$77, $Converter_literal$79, $Converter_floating_title$81, $Converter_embedded$83, $Converter_title_slide$86, $Converter_sidebar$88, $Converter_outline$90, $Converter_listing$93, $Converter_inline_kbd$95, $Converter_section$98, $Converter_example$106, $Converter_inline_button$108, $Converter_inline_menu$110, $Converter_audio$113, $Converter_stem$115, $Converter_olist$117, $Converter_inline_anchor$120, $Converter_admonition$122, $Converter_inline_quoted$124, $Converter_ulist$126, $Converter_ruler$129, $Converter_colist$131, $Converter_set_local_variables$135;

    self.$$prototype.delegate_converter = nil;
    
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
      nil
    };
    (function($base, $parent_nesting) {
      var self = $module($base, 'Helpers');

      var $nesting = [self].concat($parent_nesting), $Helpers_slice_text$1, $Helpers_to_boolean$3, $Helpers_bool_data_attr$4, $Helpers_to_valid_slidenumber$5, $Helpers_html_tag$6, $Helpers_section_level$8, $Helpers_section_title$9, $Helpers_revealjs_dependencies$10, $Helpers_resolve_content$11, $Helpers_content_for$12, $Helpers_content_for$ques$14, $Helpers_yield_content$15;

      
      Opal.const_set($nesting[0], 'EOL', "\n");
      Opal.const_set($nesting[0], 'SliceHintRx', /  +/);
      
      Opal.def(self, '$slice_text', $Helpers_slice_text$1 = function $$slice_text(str, active) {
        var $a, $b, $c, $$2, self = this;

        
        
        if (active == null) {
          active = nil;
        };
        if ($truthy(($truthy($a = ($truthy($b = active) ? $b : ($truthy($c = active['$nil?']()) ? self['$option?']("slice") : $c))) ? str['$include?']("  ") : $a))) {
          return $send(str.$split($$($nesting, 'SliceHintRx')), 'map', [], ($$2 = function(line){var self = $$2.$$s || this;

          
            
            if (line == null) {
              line = nil;
            };
            return "" + "<span class=\"line\">" + (line) + "</span>";}, $$2.$$s = self, $$2.$$arity = 1, $$2)).$join($$($nesting, 'EOL'))
        } else {
          return str
        };
      }, $Helpers_slice_text$1.$$arity = -2);
      
      Opal.def(self, '$to_boolean', $Helpers_to_boolean$3 = function $$to_boolean(val) {
        var $a, $b, $c, self = this;

        return ($truthy($a = ($truthy($b = ($truthy($c = val) ? val['$!=']("false") : $c)) ? val.$to_s()['$!=']("0") : $b)) ? $a : false)
      }, $Helpers_to_boolean$3.$$arity = 1);
      
      Opal.def(self, '$bool_data_attr', $Helpers_bool_data_attr$4 = function $$bool_data_attr(val) {
        var $a, self = this;

        
        if ($truthy(self['$attr?'](val)['$!']())) {
          return false};
        if ($truthy(($truthy($a = self.$attr(val).$downcase()['$==']("false")) ? $a : self.$attr(val)['$==']("0")))) {
          return "false"
        } else {
          return true
        };
      }, $Helpers_bool_data_attr$4.$$arity = 1);
      
      Opal.def(self, '$to_valid_slidenumber', $Helpers_to_valid_slidenumber$5 = function $$to_valid_slidenumber(val) {
        var self = this;

        
        if (val['$==']("")) {
          return true};
        if (val.$to_s()['$==']("false")) {
          return false
        } else {
          return "" + "'" + (val) + "'"
        };
      }, $Helpers_to_valid_slidenumber$5.$$arity = 1);
      Opal.const_set($nesting[0], 'DEFAULT_TOCLEVELS', 2);
      Opal.const_set($nesting[0], 'DEFAULT_SECTNUMLEVELS', 3);
      Opal.const_set($nesting[0], 'VOID_ELEMENTS', ["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
      
      Opal.def(self, '$html_tag', $Helpers_html_tag$6 = function $$html_tag(name, attributes, content) {
        var $$7, $a, $iter = $Helpers_html_tag$6.$$p, $yield = $iter || nil, self = this, attrs = nil, attrs_str = nil;

        if ($iter) $Helpers_html_tag$6.$$p = null;
        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        
        if (content == null) {
          content = nil;
        };
        attrs = $send(attributes, 'inject', [[]], ($$7 = function(attrs, $mlhs_tmp1){var self = $$7.$$s || this, $a, $b, k = nil, v = nil;

        
          
          if (attrs == null) {
            attrs = nil;
          };
          
          if ($mlhs_tmp1 == null) {
            $mlhs_tmp1 = nil;
          };
          $b = $mlhs_tmp1, $a = Opal.to_ary($b), (k = ($a[0] == null ? nil : $a[0])), (v = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(($truthy($a = v['$!']()) ? $a : v['$nil_or_empty?']()))) {
            return attrs;};
          if ($truthy(v['$is_a?']($$($nesting, 'Array')))) {
            v = v.$compact().$join(" ")};
          return attrs['$<<']((function() {if (v['$=='](true)) {
            return k
          } else {
            return "" + (k) + "=\"" + (v) + "\""
          }; return nil; })());}, $$7.$$s = self, $$7.$$arity = 2, $$7.$$has_top_level_mlhs_arg = true, $$7));
        attrs_str = (function() {if ($truthy(attrs['$empty?']())) {
          return ""
        } else {
          return $rb_plus(" ", attrs.$join(" "))
        }; return nil; })();
        if ($truthy($$($nesting, 'VOID_ELEMENTS')['$include?'](name.$to_s()))) {
          return "" + "<" + (name) + (attrs_str) + ">"
        } else {
          
          if (($yield !== nil)) {
            content = ($truthy($a = content) ? $a : Opal.yieldX($yield, []))};
          return "" + "<" + (name) + (attrs_str) + ">" + (content) + "</" + (name) + ">";
        };
      }, $Helpers_html_tag$6.$$arity = -2);
      
      Opal.def(self, '$section_level', $Helpers_section_level$8 = function $$section_level(sec) {
        var $a, $b, self = this;
        if (self._section_level == null) self._section_level = nil;

        
        
        if (sec == null) {
          sec = self;
        };
        return (self._section_level = ($truthy($a = self._section_level) ? $a : (function() {if ($truthy((($b = sec.$level()['$=='](0)) ? sec.$special() : sec.$level()['$=='](0)))) {
          return 1
        } else {
          return sec.$level()
        }; return nil; })()));
      }, $Helpers_section_level$8.$$arity = -1);
      
      Opal.def(self, '$section_title', $Helpers_section_title$9 = function $$section_title(sec) {
        var $a, $b, self = this, sectnumlevels = nil;

        
        
        if (sec == null) {
          sec = self;
        };
        sectnumlevels = self.$document().$attr("sectnumlevels", $$($nesting, 'DEFAULT_SECTNUMLEVELS')).$to_i();
        if ($truthy(($truthy($a = ($truthy($b = sec.$numbered()) ? sec.$caption()['$!']() : $b)) ? $rb_le(sec.$level(), sectnumlevels) : $a))) {
          return [sec.$sectnum(), sec.$captioned_title()].$join(" ")
        } else {
          return sec.$captioned_title()
        };
      }, $Helpers_section_title$9.$$arity = -1);
      
      Opal.def(self, '$revealjs_dependencies', $Helpers_revealjs_dependencies$10 = function $$revealjs_dependencies(document, node, revealjsdir) {
        var $a, $b, self = this, dependencies = nil, revealjs_plugins_file = nil, revealjs_plugins_content = nil;

        
        dependencies = [];
        if ($truthy(node['$attr?']("revealjs_plugin_zoom", "disabled"))) {
        } else {
          dependencies['$<<']("" + "{ src: '" + (revealjsdir) + "/plugin/zoom-js/zoom.js', async: true }")
        };
        if ($truthy(node['$attr?']("revealjs_plugin_notes", "disabled"))) {
        } else {
          dependencies['$<<']("" + "{ src: '" + (revealjsdir) + "/plugin/notes/notes.js', async: true }")
        };
        if ($truthy(node['$attr?']("revealjs_plugin_marked", "enabled"))) {
          dependencies['$<<']("" + "{ src: '" + (revealjsdir) + "/plugin/markdown/marked.js', async: true }")};
        if ($truthy(node['$attr?']("revealjs_plugin_markdown", "enabled"))) {
          dependencies['$<<']("" + "{ src: '" + (revealjsdir) + "/plugin/markdown/markdown.js', async: true }")};
        if ($truthy(($truthy($a = ($truthy($b = node['$attr?']("revealjs_plugins")) ? (revealjs_plugins_file = node.$attr("revealjs_plugins", "").$strip())['$empty?']()['$!']() : $b)) ? (revealjs_plugins_content = $$($nesting, 'File').$read(revealjs_plugins_file).$strip())['$empty?']()['$!']() : $a))) {
          dependencies['$<<'](revealjs_plugins_content)};
        return dependencies.$join(",\n      ");
      }, $Helpers_revealjs_dependencies$10.$$arity = 3);
      
      Opal.def(self, '$resolve_content', $Helpers_resolve_content$11 = function $$resolve_content() {
        var self = this;
        if (self.content_model == null) self.content_model = nil;

        if (self.content_model['$==']("simple")) {
          return "" + "<p>" + (self.$content()) + "</p>"
        } else {
          return self.$content()
        }
      }, $Helpers_resolve_content$11.$$arity = 0);
      
      Opal.def(self, '$content_for', $Helpers_content_for$12 = function $$content_for(key, opts) {
        var $iter = $Helpers_content_for$12.$$p, block = $iter || nil, $a, $b, $$13, self = this, $writer = nil;
        if (self.content == null) self.content = nil;

        if ($iter) $Helpers_content_for$12.$$p = null;
        
        
        if ($iter) $Helpers_content_for$12.$$p = null;;
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy((($a = self['content'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        } else {
          self.content = $hash2([], {})
        };
        (function() {if ($truthy(opts['$[]']("append"))) {
          
          return ($truthy($b = self.content['$[]'](key)) ? $b : (($writer = [key, []]), $send(self.content, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        } else {
          
          
          $writer = [key, []];
          $send(self.content, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }; return nil; })()['$<<']((function() {if ((block !== nil)) {
          return block
        } else {
          return $send(self, 'lambda', [], ($$13 = function(){var self = $$13.$$s || this;

          return opts['$[]']("content")}, $$13.$$s = self, $$13.$$arity = 0, $$13))
        }; return nil; })());
        return nil;
      }, $Helpers_content_for$12.$$arity = -2);
      
      Opal.def(self, '$content_for?', $Helpers_content_for$ques$14 = function(key) {
        var $a, $b, self = this;
        if (self.content == null) self.content = nil;

        return ($truthy($a = (($b = self['content'], $b != null && $b !== nil) ? 'instance-variable' : nil)) ? self.content['$key?'](key) : $a)
      }, $Helpers_content_for$ques$14.$$arity = 1);
      
      Opal.def(self, '$yield_content', $Helpers_yield_content$15 = function $$yield_content(key, opts) {
        var $a, $b, $$16, self = this, blks = nil;
        if (self.content == null) self.content = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy(($truthy($a = (($b = self['content'], $b != null && $b !== nil) ? 'instance-variable' : nil)) ? (blks = (function() {if ($truthy(opts.$fetch("drain", true))) {
          
          return self.content.$delete(key);
        } else {
          return self.content['$[]'](key)
        }; return nil; })()) : $a))) {
          $send(blks, 'map', [], ($$16 = function(b){var self = $$16.$$s || this;

          
            
            if (b == null) {
              b = nil;
            };
            return b.$call();}, $$16.$$s = self, $$16.$$arity = 1, $$16)).$join()};
        return nil;
      }, $Helpers_yield_content$15.$$arity = -2);
    })($nesting[0], $nesting);
    $send($$($nesting, 'Helpers').$constants(), 'each', [], ($Converter$17 = function(const$){var self = $Converter$17.$$s || this;

    
      
      if (const$ == null) {
        const$ = nil;
      };
      return self.$const_set(const$, $$($nesting, 'Helpers').$const_get(const$));}, $Converter$17.$$s = self, $Converter$17.$$arity = 1, $Converter$17));
    self.$register_for("revealjs", "reveal.js");
    
    Opal.def(self, '$initialize', $Converter_initialize$18 = function $$initialize(backend, opts) {
      var $a, $iter = $Converter_initialize$18.$$p, $yield = $iter || nil, self = this, delegate_backend = nil, factory = nil, converter = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Converter_initialize$18.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Converter_initialize$18, false), $zuper, $iter);
      if ($truthy(self['$respond_to?']("basebackend"))) {
        self.$basebackend("html")};
      if ($truthy(self['$respond_to?']("outfilesuffix"))) {
        self.$outfilesuffix(".html")};
      if ($truthy(self['$respond_to?']("filetype"))) {
        self.$filetype("html")};
      if ($truthy(self['$respond_to?']("supports_templates"))) {
        self.$supports_templates()};
      delegate_backend = ($truthy($a = opts['$[]']("delegate_backend")) ? $a : "html5").$to_s();
      factory = $$$($$$($$$('::', 'Asciidoctor'), 'Converter'), 'Factory');
      converter = factory.$create(delegate_backend, self.$backend_info());
      return (self.delegate_converter = (function() {if (converter['$=='](self)) {
        return factory.$new().$create(delegate_backend, self.$backend_info())
      } else {
        return converter
      }; return nil; })());
    }, $Converter_initialize$18.$$arity = -2);
    
    Opal.def(self, '$convert', $Converter_convert$19 = function $$convert(node, transform, opts) {
      var $a, self = this, converter = nil;

      
      
      if (transform == null) {
        transform = nil;
      };
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      transform = ($truthy($a = transform) ? $a : node.$node_name());
      opts = ($truthy($a = opts) ? $a : $hash2([], {}));
      converter = (function() {if ($truthy(self['$respond_to?'](transform))) {
        return self
      } else {
        return self.delegate_converter
      }; return nil; })();
      if ($truthy(opts['$empty?']())) {
        return converter.$send(transform, node)
      } else {
        return converter.$send(transform, node, opts)
      };
    }, $Converter_convert$19.$$arity = -2);
    
    Opal.def(self, '$handles?', $Converter_handles$ques$20 = function(transform) {
      var $a, self = this;

      return ($truthy($a = self['$respond_to?']("" + "convert_" + (transform))) ? $a : self['$respond_to?'](transform))
    }, $Converter_handles$ques$20.$$arity = 1);
    
    Opal.def(self, '$toc', $Converter_toc$21 = function $$toc(node, opts) {
      var $$22, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$22 = function(){var self = $$22.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div id=\"toc\"");
        _temple_html_attributeremover1 = [];
        _slim_codeattributes1 = self.$document().$attr("toc-class", "toc");
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<']("><div id=\"toctitle\">");
        _buf['$<<'](self.$document().$attr("toc-title"));
        _buf['$<<']("</div>");
        _buf['$<<'](self.$converter().$convert(self.$document(), "outline"));
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, $$22.$$s = self, $$22.$$arity = 0, $$22));
    }, $Converter_toc$21.$$arity = -2);
    
    Opal.def(self, '$page_break', $Converter_page_break$23 = function $$page_break(node, opts) {
      var $$24, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$24 = function(){var self = $$24.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div style=\"page-break-after: always;\"></div>");
        return (_buf = _buf.$join(""));}, $$24.$$s = self, $$24.$$arity = 0, $$24));
    }, $Converter_page_break$23.$$arity = -2);
    
    Opal.def(self, '$open', $Converter_open$25 = function $$open(node, opts) {
      var $$26, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$26 = function(){var self = $$26.$$s || this, $a, $b, $c, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _temple_html_attributemerger2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil;
        if (self.style == null) self.style = nil;
        if (self.parent == null) self.parent = nil;
        if (self.document == null) self.document = nil;
        if (self.id == null) self.id = nil;
        if (self.level == null) self.level = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.style['$==']("abstract")) {
          if ($truthy((($a = self.parent['$=='](self.document)) ? self.document.$doctype()['$==']("book") : self.parent['$=='](self.document)))) {
            self.$puts("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.")
          } else {
            
            _buf['$<<']("<div");
            _temple_html_attributeremover1 = [];
            _temple_html_attributemerger1 = [];
            
            $writer = [0, "quoteblock"];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [1, "abstract"];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [2, []];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            _slim_codeattributes1 = self.$role();
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
              
              _slim_codeattributes1 = _slim_codeattributes1.$flatten();
              $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributemerger1['$[]'](2)['$<<'](_slim_codeattributes1.$join(" "));
            } else {
              _temple_html_attributemerger1['$[]'](2)['$<<'](_slim_codeattributes1)
            };
            
            $writer = [2, _temple_html_attributemerger1['$[]'](2).$join("")];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
            _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
            if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover1);
              _buf['$<<']("\"");};
            _slim_codeattributes2 = self.id;
            if ($truthy(_slim_codeattributes2)) {
              if (_slim_codeattributes2['$=='](true)) {
                _buf['$<<'](" id")
              } else {
                
                _buf['$<<'](" id=\"");
                _buf['$<<'](_slim_codeattributes2);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
            if ($truthy(self['$title?']())) {
              
              _buf['$<<']("<div class=\"title\">");
              _buf['$<<'](self.$title());
              _buf['$<<']("</div>");};
            _buf['$<<']("<blockquote>");
            _buf['$<<'](self.$content());
            _buf['$<<']("</blockquote></div>");
          }
        } else if ($truthy((($a = self.style['$==']("partintro")) ? ($truthy($b = ($truthy($c = self.level['$!='](0)) ? $c : self.parent.$context()['$!=']("section"))) ? $b : self.document.$doctype()['$!=']("book")) : self.style['$==']("partintro")))) {
          self.$puts("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content.")
        } else if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _buf['$<<']("<div");
          _temple_html_attributeremover2 = [];
          _temple_html_attributemerger2 = [];
          
          $writer = [0, "openblock"];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes3 = [(function() {if ($truthy(self.style['$!=']("open"))) {
            return self.style
          } else {
            return nil
          }; return nil; })(), self.$role()];
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
            
            _slim_codeattributes3 = _slim_codeattributes3.$flatten();
            $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3.$join(" "));
          } else {
            _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3)
          };
          
          $writer = [1, _temple_html_attributemerger2['$[]'](1).$join("")];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover2['$<<']($send(_temple_html_attributemerger2, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
          if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover2);
            _buf['$<<']("\"");};
          _slim_codeattributes4 = self.id;
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$title());
            _buf['$<<']("</div>");};
          _buf['$<<']("<div class=\"content\">");
          _buf['$<<'](self.$content());
          _buf['$<<']("</div></div>");
        };
        return (_buf = _buf.$join(""));}, $$26.$$s = self, $$26.$$arity = 0, $$26));
    }, $Converter_open$25.$$arity = -2);
    
    Opal.def(self, '$paragraph', $Converter_paragraph$27 = function $$paragraph(node, opts) {
      var $$28, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$28 = function(){var self = $$28.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "paragraph"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        if ($truthy(self['$has_role?']("small"))) {
          
          _buf['$<<']("<small>");
          _buf['$<<'](self.$content());
          _buf['$<<']("</small>");
        } else {
          
          _buf['$<<']("<p>");
          _buf['$<<'](self.$content());
          _buf['$<<']("</p>");
        };
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, $$28.$$s = self, $$28.$$arity = 0, $$28));
    }, $Converter_paragraph$27.$$arity = -2);
    
    Opal.def(self, '$verse', $Converter_verse$29 = function $$verse(node, opts) {
      var $$30, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$30 = function(){var self = $$30.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, attribution = nil, citetitle = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "verseblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<pre class=\"content\">");
        _buf['$<<'](self.$content());
        _buf['$<<']("</pre>");
        attribution = (function() {if ($truthy(self['$attr?']("attribution"))) {
          
          return self.$attr("attribution");
        } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
          
          return self.$attr("citetitle");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          _buf['$<<']("<div class=\"attribution\">");
          if ($truthy(citetitle)) {
            
            _buf['$<<']("<cite>");
            _buf['$<<'](citetitle);
            _buf['$<<']("</cite>");};
          if ($truthy(attribution)) {
            
            if ($truthy(citetitle)) {
              _buf['$<<']("<br>")};
            _buf['$<<']("&#8212; ");
            _buf['$<<'](attribution);};
          _buf['$<<']("</div>");};
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, $$30.$$s = self, $$30.$$arity = 0, $$30));
    }, $Converter_verse$29.$$arity = -2);
    
    Opal.def(self, '$dlist', $Converter_dlist$31 = function $$dlist(node, opts) {
      var $$32, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$32 = function(){var self = $$32.$$s || this, $$33, $a, $$35, $$37, _buf = nil, $case = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _temple_html_attributemerger2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _temple_html_attributeremover4 = nil, _temple_html_attributemerger3 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $case = self.style;
        if ("qanda"['$===']($case)) {
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "qlist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = ["qanda", self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<ol>");
        $send(self.$items(), 'each', [], ($$33 = function(questions, answer){var self = $$33.$$s || this, $$34;

        
          
          if (questions == null) {
            questions = nil;
          };
          
          if (answer == null) {
            answer = nil;
          };
          _buf['$<<']("<li>");
          $send([].concat(Opal.to_a(questions)), 'each', [], ($$34 = function(question){var self = $$34.$$s || this;

          
            
            if (question == null) {
              question = nil;
            };
            _buf['$<<']("<p><em>");
            _buf['$<<'](question.$text());
            return _buf['$<<']("</em></p>");}, $$34.$$s = self, $$34.$$arity = 1, $$34));
          if ($truthy(answer['$nil?']())) {
          } else {
            
            if ($truthy(answer['$text?']())) {
              
              _buf['$<<']("<p>");
              _buf['$<<'](answer.$text());
              _buf['$<<']("</p>");};
            if ($truthy(answer['$blocks?']())) {
              _buf['$<<'](answer.$content())};
          };
          return _buf['$<<']("</li>");}, $$33.$$s = self, $$33.$$arity = 2, $$33));
        _buf['$<<']("</ol></div>");}
        else if ("horizontal"['$===']($case)) {
        _buf['$<<']("<div");
        _temple_html_attributeremover2 = [];
        _temple_html_attributemerger2 = [];
        
        $writer = [0, "hdlist"];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes3 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3)
        };
        
        $writer = [1, _temple_html_attributemerger2['$[]'](1).$join("")];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover2['$<<']($send(_temple_html_attributemerger2, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _slim_codeattributes4 = self.id;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<table>");
        if ($truthy(($truthy($a = self['$attr?']("labelwidth")) ? $a : self['$attr?']("itemwidth")))) {
          
          _buf['$<<']("<colgroup><col");
          _slim_codeattributes5 = (function() {if ($truthy(self['$attr?']("labelwidth"))) {
            return "" + "width:" + (self.$attr("labelwidth").$chomp("%")) + "%;"
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes5)) {
            if (_slim_codeattributes5['$=='](true)) {
              _buf['$<<'](" style")
            } else {
              
              _buf['$<<'](" style=\"");
              _buf['$<<'](_slim_codeattributes5);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("><col");
          _slim_codeattributes6 = (function() {if ($truthy(self['$attr?']("itemwidth"))) {
            return "" + "width:" + (self.$attr("itemwidth").$chomp("%")) + "%;"
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes6)) {
            if (_slim_codeattributes6['$=='](true)) {
              _buf['$<<'](" style")
            } else {
              
              _buf['$<<'](" style=\"");
              _buf['$<<'](_slim_codeattributes6);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("></colgroup>");};
        $send(self.$items(), 'each', [], ($$35 = function(terms, dd){var self = $$35.$$s || this, $$36, _temple_html_attributeremover3 = nil, _slim_codeattributes7 = nil, last_term = nil;

        
          
          if (terms == null) {
            terms = nil;
          };
          
          if (dd == null) {
            dd = nil;
          };
          _buf['$<<']("<tr><td");
          _temple_html_attributeremover3 = [];
          _slim_codeattributes7 = ["hdlist1", (function() {if ($truthy(self['$option?']("strong"))) {
            return "strong"
          } else {
            return nil
          }; return nil; })()];
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes7))) {
            
            _slim_codeattributes7 = _slim_codeattributes7.$flatten();
            $send(_slim_codeattributes7, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes7, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes7.$join(" "));
          } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes7)
          };
          _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"");};
          _buf['$<<'](">");
          terms = [].concat(Opal.to_a(terms));
          last_term = terms.$last();
          $send(terms, 'each', [], ($$36 = function(dt){var self = $$36.$$s || this;

          
            
            if (dt == null) {
              dt = nil;
            };
            _buf['$<<'](dt.$text());
            if ($truthy(dt['$!='](last_term))) {
              return _buf['$<<']("<br>")
            } else {
              return nil
            };}, $$36.$$s = self, $$36.$$arity = 1, $$36));
          _buf['$<<']("</td><td class=\"hdlist2\">");
          if ($truthy(dd['$nil?']())) {
          } else {
            
            if ($truthy(dd['$text?']())) {
              
              _buf['$<<']("<p>");
              _buf['$<<'](dd.$text());
              _buf['$<<']("</p>");};
            if ($truthy(dd['$blocks?']())) {
              _buf['$<<'](dd.$content())};
          };
          return _buf['$<<']("</td></tr>");}, $$35.$$s = self, $$35.$$arity = 2, $$35));
        _buf['$<<']("</table></div>");}
        else {
        _buf['$<<']("<div");
        _temple_html_attributeremover4 = [];
        _temple_html_attributemerger3 = [];
        
        $writer = [0, "dlist"];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes8 = [self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes8))) {
          
          _slim_codeattributes8 = _slim_codeattributes8.$flatten();
          $send(_slim_codeattributes8, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes8, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger3['$[]'](1)['$<<'](_slim_codeattributes8.$join(" "));
        } else {
          _temple_html_attributemerger3['$[]'](1)['$<<'](_slim_codeattributes8)
        };
        
        $writer = [1, _temple_html_attributemerger3['$[]'](1).$join("")];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover4['$<<']($send(_temple_html_attributemerger3, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover4 = _temple_html_attributeremover4.$join("");
        if ($truthy(_temple_html_attributeremover4['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover4);
          _buf['$<<']("\"");};
        _slim_codeattributes9 = self.id;
        if ($truthy(_slim_codeattributes9)) {
          if (_slim_codeattributes9['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<dl>");
        $send(self.$items(), 'each', [], ($$37 = function(terms, dd){var self = $$37.$$s || this, $$38;

        
          
          if (terms == null) {
            terms = nil;
          };
          
          if (dd == null) {
            dd = nil;
          };
          $send([].concat(Opal.to_a(terms)), 'each', [], ($$38 = function(dt){var self = $$38.$$s || this, _temple_html_attributeremover5 = nil, _slim_codeattributes10 = nil;
            if (self.style == null) self.style = nil;

          
            
            if (dt == null) {
              dt = nil;
            };
            _buf['$<<']("<dt");
            _temple_html_attributeremover5 = [];
            _slim_codeattributes10 = (function() {if ($truthy(self.style)) {
              return nil
            } else {
              return "hdlist1"
            }; return nil; })();
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes10))) {
              
              _slim_codeattributes10 = _slim_codeattributes10.$flatten();
              $send(_slim_codeattributes10, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes10, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover5['$<<'](_slim_codeattributes10.$join(" "));
            } else {
              _temple_html_attributeremover5['$<<'](_slim_codeattributes10)
            };
            _temple_html_attributeremover5 = _temple_html_attributeremover5.$join("");
            if ($truthy(_temple_html_attributeremover5['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover5);
              _buf['$<<']("\"");};
            _buf['$<<'](">");
            _buf['$<<'](dt.$text());
            return _buf['$<<']("</dt>");}, $$38.$$s = self, $$38.$$arity = 1, $$38));
          if ($truthy(dd['$nil?']())) {
            return nil
          } else {
            
            _buf['$<<']("<dd>");
            if ($truthy(dd['$text?']())) {
              
              _buf['$<<']("<p>");
              _buf['$<<'](dd.$text());
              _buf['$<<']("</p>");};
            if ($truthy(dd['$blocks?']())) {
              _buf['$<<'](dd.$content())};
            return _buf['$<<']("</dd>");
          };}, $$37.$$s = self, $$37.$$arity = 2, $$37));
        _buf['$<<']("</dl></div>");};
        return (_buf = _buf.$join(""));}, $$32.$$s = self, $$32.$$arity = 0, $$32));
    }, $Converter_dlist$31.$$arity = -2);
    
    Opal.def(self, '$inline_footnote', $Converter_inline_footnote$39 = function $$inline_footnote(node, opts) {
      var $$40, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$40 = function(){var self = $$40.$$s || this, _buf = nil, _slim_codeattributes1 = nil;
        if (self.type == null) self.type = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.type['$==']("xref")) {
          
          _buf['$<<']("<span class=\"footnoteref\">[<a class=\"footnote\" href=\"#_footnote_");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" title=\"View footnote.\">");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("</a>]</span>");
        } else {
          
          _buf['$<<']("<span class=\"footnote\"");
          _slim_codeattributes1 = (function() {if ($truthy(self.id)) {
            return "" + "_footnote_" + (self.id)
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">[<a id=\"_footnoteref_");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" class=\"footnote\" href=\"#_footnote_");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" title=\"View footnote.\">");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("</a>]</span>");
        };
        return (_buf = _buf.$join(""));}, $$40.$$s = self, $$40.$$arity = 0, $$40));
    }, $Converter_inline_footnote$39.$$arity = -2);
    
    Opal.def(self, '$stretch_nested_elements', $Converter_stretch_nested_elements$41 = function $$stretch_nested_elements(node, opts) {
      var $$42, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$42 = function(){var self = $$42.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<script>var dom = {};\ndom.slides = document.querySelector('.reveal .slides');\n\nfunction getRemainingHeight(element, slideElement, height) {\n  height = height || 0;\n  if (element) {\n    var newHeight, oldHeight = element.style.height;\n    // Change the .stretch element height to 0 in order find the height of all\n    // the other elements\n    element.style.height = '0px';\n    // In Overview mode, the parent (.slide) height is set of 700px.\n    // Restore it temporarily to its natural height.\n    slideElement.style.height = 'auto';\n    newHeight = height - slideElement.offsetHeight;\n    // Restore the old height, just in case\n    element.style.height = oldHeight + 'px';\n    // Clear the parent (.slide) height. .removeProperty works in IE9+\n    slideElement.style.removeProperty('height');\n    return newHeight;\n  }\n  return height;\n}\n\nfunction layoutSlideContents(width, height) {\n  // Handle sizing of elements with the 'stretch' class\n  toArray(dom.slides.querySelectorAll('section .stretch')).forEach(function (element) {\n    // Determine how much vertical space we can use\n    var limit = 5; // hard limit\n    var parent = element.parentNode;\n    while (parent.nodeName !== 'SECTION' && limit > 0) {\n      parent = parent.parentNode;\n      limit--;\n    }\n    if (limit === 0) {\n      // unable to find parent, aborting!\n      return;\n    }\n    var remainingHeight = getRemainingHeight(element, parent, height);\n    // Consider the aspect ratio of media elements\n    if (/(img|video)/gi.test(element.nodeName)) {\n      var nw = element.naturalWidth || element.videoWidth, nh = element.naturalHeight || element.videoHeight;\n      var es = Math.min(width / nw, remainingHeight / nh);\n      element.style.width = (nw * es) + 'px';\n      element.style.height = (nh * es) + 'px';\n    } else {\n      element.style.width = width + 'px';\n      element.style.height = remainingHeight + 'px';\n    }\n  });\n}\n\nfunction toArray(o) {\n  return Array.prototype.slice.call(o);\n}\n\nReveal.addEventListener('slidechanged', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('ready', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('resize', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});</script>");
        return (_buf = _buf.$join(""));}, $$42.$$s = self, $$42.$$arity = 0, $$42));
    }, $Converter_stretch_nested_elements$41.$$arity = -2);
    
    Opal.def(self, '$image', $Converter_image$43 = function $$image(node, opts) {
      var $$44, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$44 = function(){var self = $$44.$$s || this, $a, $b, _buf = nil, width = nil, height = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        width = (function() {if ($truthy(self['$attr?']("width"))) {
          
          return self.$attr("width");
        } else {
          return nil
        }; return nil; })();
        height = (function() {if ($truthy(self['$attr?']("height"))) {
          
          return self.$attr("height");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = self['$has_role?']("stretch")) ? ($truthy($b = self['$attr?']("width")) ? $b : self['$attr?']("height"))['$!']() : $a))) {
          height = "100%"};
        if ($truthy(($truthy($a = self.$attributes()['$[]'](1)['$==']("background")) ? $a : self.$attributes()['$[]'](1)['$==']("canvas")))) {
        } else {
          
          _buf['$<<']("<div");
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "imageblock"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes1 = self.$roles();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
          };
          
          $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes2 = self.id;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes3 = [(function() {if ($truthy(self['$attr?']("align"))) {
            return "" + "text-align: " + (self.$attr("align"))
          } else {
            return nil
          }; return nil; })(), (function() {if ($truthy(self['$attr?']("float"))) {
            return "" + "float: " + (self.$attr("float"))
          } else {
            return nil
          }; return nil; })()].$compact().$join("; ");
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" style")
            } else {
              
              _buf['$<<'](" style=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"");
            _slim_codeattributes4 = self.$attr("link");
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes5 = self.$attr("window");
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" target")
              } else {
                
                _buf['$<<'](" target=\"");
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes6 = self.$bool_data_attr("link_preview");
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" data-preview-link")
              } else {
                
                _buf['$<<'](" data-preview-link=\"");
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("><img");
            _slim_codeattributes7 = self.$image_uri(self.$attr("target"));
            if ($truthy(_slim_codeattributes7)) {
              if (_slim_codeattributes7['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes7);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes8 = self.$attr("alt");
            if ($truthy(_slim_codeattributes8)) {
              if (_slim_codeattributes8['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes8);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes9 = width;
            if ($truthy(_slim_codeattributes9)) {
              if (_slim_codeattributes9['$=='](true)) {
                _buf['$<<'](" width")
              } else {
                
                _buf['$<<'](" width=\"");
                _buf['$<<'](_slim_codeattributes9);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes10 = height;
            if ($truthy(_slim_codeattributes10)) {
              if (_slim_codeattributes10['$=='](true)) {
                _buf['$<<'](" height")
              } else {
                
                _buf['$<<'](" height=\"");
                _buf['$<<'](_slim_codeattributes10);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes11 = (function() {if ($truthy(self['$attr?']("background"))) {
              return "" + "background: " + (self.$attr("background"))
            } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes11)) {
              if (_slim_codeattributes11['$=='](true)) {
                _buf['$<<'](" style")
              } else {
                
                _buf['$<<'](" style=\"");
                _buf['$<<'](_slim_codeattributes11);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></a>");
          } else {
            
            _buf['$<<']("<img");
            _slim_codeattributes12 = self.$image_uri(self.$attr("target"));
            if ($truthy(_slim_codeattributes12)) {
              if (_slim_codeattributes12['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes12);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes13 = self.$attr("alt");
            if ($truthy(_slim_codeattributes13)) {
              if (_slim_codeattributes13['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes13);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes14 = width;
            if ($truthy(_slim_codeattributes14)) {
              if (_slim_codeattributes14['$=='](true)) {
                _buf['$<<'](" width")
              } else {
                
                _buf['$<<'](" width=\"");
                _buf['$<<'](_slim_codeattributes14);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes15 = height;
            if ($truthy(_slim_codeattributes15)) {
              if (_slim_codeattributes15['$=='](true)) {
                _buf['$<<'](" height")
              } else {
                
                _buf['$<<'](" height=\"");
                _buf['$<<'](_slim_codeattributes15);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes16 = (function() {if ($truthy(self['$attr?']("background"))) {
              return "" + "background: " + (self.$attr("background"))
            } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes16)) {
              if (_slim_codeattributes16['$=='](true)) {
                _buf['$<<'](" style")
              } else {
                
                _buf['$<<'](" style=\"");
                _buf['$<<'](_slim_codeattributes16);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          };
          _buf['$<<']("</div>");
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$captioned_title());
            _buf['$<<']("</div>");};
        };
        return (_buf = _buf.$join(""));}, $$44.$$s = self, $$44.$$arity = 0, $$44));
    }, $Converter_image$43.$$arity = -2);
    
    Opal.def(self, '$inline_break', $Converter_inline_break$45 = function $$inline_break(node, opts) {
      var $$46, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$46 = function(){var self = $$46.$$s || this, _buf = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<'](self.text);
        _buf['$<<']("<br>");
        return (_buf = _buf.$join(""));}, $$46.$$s = self, $$46.$$arity = 0, $$46));
    }, $Converter_inline_break$45.$$arity = -2);
    
    Opal.def(self, '$preamble', $Converter_preamble$47 = function $$preamble(node, opts) {
      var $$48, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$48 = function(){var self = $$48.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        return (_buf = _buf.$join(""));}, $$48.$$s = self, $$48.$$arity = 0, $$48));
    }, $Converter_preamble$47.$$arity = -2);
    
    Opal.def(self, '$thematic_break', $Converter_thematic_break$49 = function $$thematic_break(node, opts) {
      var $$50, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$50 = function(){var self = $$50.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>");
        return (_buf = _buf.$join(""));}, $$50.$$s = self, $$50.$$arity = 0, $$50));
    }, $Converter_thematic_break$49.$$arity = -2);
    
    Opal.def(self, '$quote', $Converter_quote$51 = function $$quote(node, opts) {
      var $$52, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$52 = function(){var self = $$52.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, attribution = nil, citetitle = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "quoteblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<blockquote>");
        _buf['$<<'](self.$content());
        _buf['$<<']("</blockquote>");
        attribution = (function() {if ($truthy(self['$attr?']("attribution"))) {
          
          return self.$attr("attribution");
        } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
          
          return self.$attr("citetitle");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          _buf['$<<']("<div class=\"attribution\">");
          if ($truthy(citetitle)) {
            
            _buf['$<<']("<cite>");
            _buf['$<<'](citetitle);
            _buf['$<<']("</cite>");};
          if ($truthy(attribution)) {
            
            if ($truthy(citetitle)) {
              _buf['$<<']("<br>")};
            _buf['$<<']("&#8212; ");
            _buf['$<<'](attribution);};
          _buf['$<<']("</div>");};
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, $$52.$$s = self, $$52.$$arity = 0, $$52));
    }, $Converter_quote$51.$$arity = -2);
    
    Opal.def(self, '$inline_indexterm', $Converter_inline_indexterm$53 = function $$inline_indexterm(node, opts) {
      var $$54, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$54 = function(){var self = $$54.$$s || this, _buf = nil;
        if (self.type == null) self.type = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.type['$==']("visible")) {
          _buf['$<<'](self.text)};
        return (_buf = _buf.$join(""));}, $$54.$$s = self, $$54.$$arity = 0, $$54));
    }, $Converter_inline_indexterm$53.$$arity = -2);
    
    Opal.def(self, '$pass', $Converter_pass$55 = function $$pass(node, opts) {
      var $$56, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$56 = function(){var self = $$56.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<'](self.$content());
        return (_buf = _buf.$join(""));}, $$56.$$s = self, $$56.$$arity = 0, $$56));
    }, $Converter_pass$55.$$arity = -2);
    
    Opal.def(self, '$table', $Converter_table$57 = function $$table(node, opts) {
      var $$58, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$58 = function(){var self = $$58.$$s || this, $$59, $$60, $$61, $$62, _buf = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.id == null) self.id = nil;
        if (self.columns == null) self.columns = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<table");
        _slim_codeattributes1 = self.id;
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = ["tableblock", "" + "frame-" + (self.$attr("frame", "all")), "" + "grid-" + (self.$attr("grid", "all")), self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes3 = [(function() {if ($truthy(self['$option?']("autowidth"))) {
          return nil
        } else {
          return "" + "width:" + (self.$attr("tablepcwidth")) + "%"
        }; return nil; })(), (function() {if ($truthy(self['$attr?']("float"))) {
          return "" + "float:" + (self.$attr("float"))
        } else {
          return nil
        }; return nil; })()].$compact().$join("; ");
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" style")
          } else {
            
            _buf['$<<'](" style=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<caption class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</caption>");};
        if ($truthy(self.$attr("rowcount")['$zero?']())) {
        } else {
          
          _buf['$<<']("<colgroup>");
          if ($truthy(self['$option?']("autowidth"))) {
            $send(self.columns, 'each', [], ($$59 = function(){var self = $$59.$$s || this;

            return _buf['$<<']("<col>")}, $$59.$$s = self, $$59.$$arity = 0, $$59))
          } else {
            $send(self.columns, 'each', [], ($$60 = function(col){var self = $$60.$$s || this;

            
              
              if (col == null) {
                col = nil;
              };
              _buf['$<<']("<col style=\"width:");
              _buf['$<<'](col.$attr("colpcwidth"));
              return _buf['$<<']("%\">");}, $$60.$$s = self, $$60.$$arity = 1, $$60))
          };
          _buf['$<<']("</colgroup>");
          $send($send(["head", "foot", "body"], 'select', [], ($$61 = function(tblsec){var self = $$61.$$s || this;
            if (self.rows == null) self.rows = nil;

          
            
            if (tblsec == null) {
              tblsec = nil;
            };
            return self.rows['$[]'](tblsec)['$empty?']()['$!']();}, $$61.$$s = self, $$61.$$arity = 1, $$61)), 'each', [], ($$62 = function(tblsec){var self = $$62.$$s || this, $$63;
            if (self.rows == null) self.rows = nil;

          
            
            if (tblsec == null) {
              tblsec = nil;
            };
            _buf['$<<']("<t");
            _buf['$<<'](tblsec);
            _buf['$<<'](">");
            return $send(self.rows['$[]'](tblsec), 'each', [], ($$63 = function(row){var self = $$63.$$s || this, $$64;

            
              
              if (row == null) {
                row = nil;
              };
              _buf['$<<']("<tr>");
              $send(row, 'each', [], ($$64 = function(cell){var self = $$64.$$s || this, $a, $$65, cell_content = nil, $case = nil, _slim_controls1 = nil;
                if (self.document == null) self.document = nil;

              
                
                if (cell == null) {
                  cell = nil;
                };
                if (tblsec['$==']("head")) {
                  cell_content = cell.$text()
                } else {
                  $case = cell.$style();
                  if ("literal"['$===']($case)) {cell_content = cell.$text()}
                  else {cell_content = cell.$content()}
                };
                _slim_controls1 = $send(self, 'html_tag', [(function() {if ($truthy(($truthy($a = tblsec['$==']("head")) ? $a : cell.$style()['$==']("header")))) {
                  return "th"
                } else {
                  return "td"
                }; return nil; })(), $hash2(["class", "colspan", "rowspan", "style"], {"class": ["tableblock", "" + "halign-" + (cell.$attr("halign")), "" + "valign-" + (cell.$attr("valign"))], "colspan": cell.$colspan(), "rowspan": cell.$rowspan(), "style": (function() {if ($truthy(self.document['$attr?']("cellbgcolor"))) {
                  return "" + "background-color:" + (self.document.$attr("cellbgcolor")) + ";"
                } else {
                  return nil
                }; return nil; })()})], ($$65 = function(){var self = $$65.$$s || this, $$66, $$67, _slim_controls2 = nil;

                
                  _slim_controls2 = [];
                  if (tblsec['$==']("head")) {
                    _slim_controls2['$<<'](cell_content)
                  } else {
                    $case = cell.$style();
                    if ("asciidoc"['$===']($case)) {
                    _slim_controls2['$<<']("<div>");
                    _slim_controls2['$<<'](cell_content);
                    _slim_controls2['$<<']("</div>");}
                    else if ("literal"['$===']($case)) {
                    _slim_controls2['$<<']("<div class=\"literal\"><pre>");
                    _slim_controls2['$<<'](cell_content);
                    _slim_controls2['$<<']("</pre></div>");}
                    else if ("header"['$===']($case)) {$send(cell_content, 'each', [], ($$66 = function(text){var self = $$66.$$s || this;

                    
                      
                      if (text == null) {
                        text = nil;
                      };
                      _slim_controls2['$<<']("<p class=\"tableblock header\">");
                      _slim_controls2['$<<'](text);
                      return _slim_controls2['$<<']("</p>");}, $$66.$$s = self, $$66.$$arity = 1, $$66))}
                    else {$send(cell_content, 'each', [], ($$67 = function(text){var self = $$67.$$s || this;

                    
                      
                      if (text == null) {
                        text = nil;
                      };
                      _slim_controls2['$<<']("<p class=\"tableblock\">");
                      _slim_controls2['$<<'](text);
                      return _slim_controls2['$<<']("</p>");}, $$67.$$s = self, $$67.$$arity = 1, $$67))}
                  };
                  return (_slim_controls2 = _slim_controls2.$join(""));}, $$65.$$s = self, $$65.$$arity = 0, $$65));
                return _buf['$<<'](_slim_controls1);}, $$64.$$s = self, $$64.$$arity = 1, $$64));
              return _buf['$<<']("</tr>");}, $$63.$$s = self, $$63.$$arity = 1, $$63));}, $$62.$$s = self, $$62.$$arity = 1, $$62));
        };
        _buf['$<<']("</table>");
        return (_buf = _buf.$join(""));}, $$58.$$s = self, $$58.$$arity = 0, $$58));
    }, $Converter_table$57.$$arity = -2);
    
    Opal.def(self, '$document', $Converter_document$68 = function $$document(node, opts) {
      var $$69, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$69 = function(){var self = $$69.$$s || this, $a, $$70, _buf = nil, _slim_codeattributes1 = nil, revealjsdir = nil, asset_uri_scheme = nil, cdn_base = nil, linkcss = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, eqnums_val = nil, eqnums_opt = nil, syntax_hl = nil, _slim_codeattributes8 = nil, customcss = nil, _docinfo = nil, bg_image = nil, bg_video = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, _title_obj = nil, _slice = nil, preamble = nil, docinfo_content = nil;
        if (self.header == null) self.header = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<!DOCTYPE html><html");
        _slim_codeattributes1 = (function() {if ($truthy(self['$attr?']("nolang"))) {
          return nil
        } else {
          return self.$attr("lang", "en")
        }; return nil; })();
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" lang")
          } else {
            
            _buf['$<<'](" lang=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui\"><title>");
        _buf['$<<'](self.$doctitle($hash2(["sanitize", "use_fallback"], {"sanitize": true, "use_fallback": true})));
        _buf['$<<']("</title>");
        if ($truthy((($a = $$($nesting, 'RUBY_ENGINE')['$==']("opal")) ? $$($nesting, 'JAVASCRIPT_PLATFORM')['$==']("node") : $$($nesting, 'RUBY_ENGINE')['$==']("opal")))) {
          revealjsdir = self.$attr("revealjsdir", "node_modules/reveal.js")
        } else {
          revealjsdir = self.$attr("revealjsdir", "reveal.js")
        };
        if ($truthy((asset_uri_scheme = self.$attr("asset-uri-scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        cdn_base = "" + (asset_uri_scheme) + "//cdnjs.cloudflare.com/ajax/libs";
        $send(["description", "keywords", "author", "copyright"], 'each', [], ($$70 = function(key){var self = $$70.$$s || this, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;

        
          
          if (key == null) {
            key = nil;
          };
          if ($truthy(self['$attr?'](key))) {
            
            _buf['$<<']("<meta");
            _slim_codeattributes2 = key;
            if ($truthy(_slim_codeattributes2)) {
              if (_slim_codeattributes2['$=='](true)) {
                _buf['$<<'](" name")
              } else {
                
                _buf['$<<'](" name=\"");
                _buf['$<<'](_slim_codeattributes2);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes3 = self.$attr(key);
            if ($truthy(_slim_codeattributes3)) {
              if (_slim_codeattributes3['$=='](true)) {
                _buf['$<<'](" content")
              } else {
                
                _buf['$<<'](" content=\"");
                _buf['$<<'](_slim_codeattributes3);
                _buf['$<<']("\"");
              }};
            return _buf['$<<'](">");
          } else {
            return nil
          };}, $$70.$$s = self, $$70.$$arity = 1, $$70));
        linkcss = self['$attr?']("linkcss");
        _buf['$<<']("<link rel=\"stylesheet\" href=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/reset.css\"><link rel=\"stylesheet\" href=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/reveal.css\">");
        if ($truthy(self['$attr?']("revealjs_customtheme"))) {
          
          _buf['$<<']("<link rel=\"stylesheet\"");
          _slim_codeattributes4 = self.$attr("revealjs_customtheme");
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" href")
            } else {
              
              _buf['$<<'](" href=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](" id=\"theme\">");
        } else {
          
          _buf['$<<']("<link rel=\"stylesheet\" href=\"");
          _buf['$<<'](revealjsdir);
          _buf['$<<']("/css/theme/");
          _buf['$<<'](self.$attr("revealjs_theme", "black"));
          _buf['$<<'](".css\" id=\"theme\">");
        };
        _buf['$<<']("<!--This CSS is generated by the Asciidoctor reveal.js converter to further integrate AsciiDoc's existing semantic with reveal.js--><style type=\"text/css\">.reveal div.right{float:right}\n\n/* listing block */\n.reveal .listingblock.stretch>.content{height: 100%}\n.reveal .listingblock.stretch>.content>pre{height: 100%}\n.reveal .listingblock.stretch>.content>pre>code{height:100%;max-height:100%}\n\n/* tables */\ntable{border-collapse:collapse;border-spacing:0}\ntable{margin-bottom:1.25em;border:solid 1px #dedede}\ntable thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;text-align:left}\ntable tr th,table tr td{padding:.5625em .625em;font-size:inherit}\ntable thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}\ntd.tableblock>.content{margin-bottom:1.25em}\ntd.tableblock>.content>:last-child{margin-bottom:-1.25em}\ntable.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}\ntable.grid-all>thead>tr>.tableblock,table.grid-all>tbody>tr>.tableblock{border-width:0 1px 1px 0}\ntable.grid-all>tfoot>tr>.tableblock{border-width:1px 1px 0 0}\ntable.grid-cols>*>tr>.tableblock{border-width:0 1px 0 0}\ntable.grid-rows>thead>tr>.tableblock,table.grid-rows>tbody>tr>.tableblock{border-width:0 0 1px}\ntable.grid-rows>tfoot>tr>.tableblock{border-width:1px 0 0}\ntable.grid-all>*>tr>.tableblock:last-child,table.grid-cols>*>tr>.tableblock:last-child{border-right-width:0}\ntable.grid-all>tbody>tr:last-child>.tableblock,table.grid-all>thead:last-child>tr>.tableblock,table.grid-rows>tbody>tr:last-child>.tableblock,table.grid-rows>thead:last-child>tr>.tableblock{border-bottom-width:0}\ntable.frame-all{border-width:1px}\ntable.frame-sides{border-width:0 1px}\ntable.frame-topbot,table.frame-ends{border-width:1px 0}\n.reveal table th.halign-left,.reveal table td.halign-left{text-align:left}\n.reveal table th.halign-right,.reveal table td.halign-right{text-align:right}\n.reveal table th.halign-center,.reveal table td.halign-center{text-align:center}\n.reveal table th.valign-top,.reveal table td.valign-top{vertical-align:top}\n.reveal table th.valign-bottom,.reveal table td.valign-bottom{vertical-align:bottom}\n.reveal table th.valign-middle,.reveal table td.valign-middle{vertical-align:middle}\ntable thead th,table tfoot th{font-weight:bold}\ntbody tr th{display:table-cell;line-height:1.6}\ntbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{font-weight:bold}\nthead{display:table-header-group}\n\n.reveal table.grid-none th,.reveal table.grid-none td{border-bottom:0!important}\n\n/* kbd macro */\nkbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}\n.keyseq kbd:first-child{margin-left:0}\n.keyseq kbd:last-child{margin-right:0}\n\n/* callouts */\n.conum[data-value] {display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);-webkit-border-radius:50%;border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}\n.conum[data-value] *{color:#fff!important}\n.conum[data-value]+b{display:none}\n.conum[data-value]:after{content:attr(data-value)}\npre .conum[data-value]{position:relative;top:-.125em}\nb.conum *{color:inherit!important}\n.conum:not([data-value]):empty{display:none}\n/* Callout list */\n.hdlist>table,.colist>table{border:0;background:none}\n.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}\ntd.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}\ntd.hdlist1{font-weight:bold;padding-bottom:1.25em}\n/* Disabled from Asciidoctor CSS because it caused callout list to go under the\n * source listing when .stretch is applied (see #335)\n * .literalblock+.colist,.listingblock+.colist{margin-top:-.5em} */\n.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}\n.colist td:not([class]):first-child img{max-width:none}\n.colist td:not([class]):last-child{padding:.25em 0}\n\n/* Override Asciidoctor CSS that causes issues with reveal.js features */\n.reveal .hljs table{border: 0}\n/* Callout list rows would have a bottom border with some reveal.js themes (see #335) */\n.reveal .colist>table th, .reveal .colist>table td {border-bottom:0}\n/* Fixes line height with Highlight.js source listing when linenums enabled (see #331) */\n.reveal .hljs table thead tr th, .reveal .hljs table tfoot tr th, .reveal .hljs table tbody tr td, .reveal .hljs table tr td, .reveal .hljs table tfoot tr td{line-height:inherit}\n\n/* Columns layout */\n.columns .slide-content {\n  display: flex;\n}\n\n.columns.wrap .slide-content {\n  flex-wrap: wrap;\n}\n\n.columns.is-vcentered .slide-content {\n  align-items: center;\n}\n\n.columns .slide-content > .column {\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n  padding: .75rem;\n}\n\n.columns .slide-content > .column.is-full {\n  flex: none;\n  width: 100%;\n}\n\n.columns .slide-content > .column.is-four-fifths {\n  flex: none;\n  width: 80%;\n}\n\n.columns .slide-content > .column.is-three-quarters {\n  flex: none;\n  width: 75%;\n}\n\n.columns .slide-content > .column.is-two-thirds {\n  flex: none;\n  width: 66.6666%;\n}\n\n.columns .slide-content > .column.is-three-fifths {\n  flex: none;\n  width: 60%;\n}\n\n.columns .slide-content > .column.is-half {\n  flex: none;\n  width: 50%;\n}\n\n.columns .slide-content > .column.is-two-fifths {\n  flex: none;\n  width: 40%;\n}\n\n.columns .slide-content > .column.is-one-third {\n  flex: none;\n  width: 33.3333%;\n}\n\n.columns .slide-content > .column.is-one-quarter {\n  flex: none;\n  width: 25%;\n}\n\n.columns .slide-content > .column.is-one-fifth {\n  flex: none;\n  width: 20%;\n}\n</style>");
        if ($truthy(self['$attr?']("icons", "font"))) {
          if ($truthy(self['$attr?']("iconfont-remote"))) {
            
            _buf['$<<']("<link rel=\"stylesheet\"");
            _slim_codeattributes5 = self.$attr("iconfont-cdn", "" + (cdn_base) + "/font-awesome/5.12.0-1/css/all.min.css");
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("><link rel=\"stylesheet\"");
            _slim_codeattributes6 = self.$attr("iconfont-cdn", "" + (cdn_base) + "/font-awesome/5.12.0-1/css/v4-shims.min.css");
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          } else {
            
            _buf['$<<']("<link rel=\"stylesheet\"");
            _slim_codeattributes7 = self.$normalize_web_path("" + (self.$attr("iconfont-name", "font-awesome")) + ".css", self.$attr("stylesdir", ""), false);
            if ($truthy(_slim_codeattributes7)) {
              if (_slim_codeattributes7['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes7);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          }};
        if ($truthy(self['$attr?']("stem"))) {
          
          eqnums_val = self.$attr("eqnums", "none");
          if (eqnums_val['$==']("")) {
            eqnums_val = "AMS"};
          eqnums_opt = "" + " equationNumbers: { autoNumber: \"" + (eqnums_val) + "\" } ";
          _buf['$<<']("<script type=\"text/x-mathjax-config\">MathJax.Hub.Config({\ntex2jax: {\n  inlineMath: [");
          _buf['$<<']($$$($$($nesting, 'Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]']("latexmath").$to_s());
          _buf['$<<']("],\n  displayMath: [");
          _buf['$<<']($$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("latexmath").$to_s());
          _buf['$<<']("],\n  ignoreClass: \"nostem|nolatexmath\"\n},\nasciimath2jax: {\n  delimiters: [");
          _buf['$<<']($$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("asciimath").$to_s());
          _buf['$<<']("],\n  ignoreClass: \"nostem|noasciimath\"\n},\nTeX: {");
          _buf['$<<'](eqnums_opt);
          _buf['$<<']("}\n});</script><script src=\"");
          _buf['$<<'](cdn_base);
          _buf['$<<']("/mathjax/2.4.0/MathJax.js?config=TeX-MML-AM_HTMLorMML\"></script>");};
        syntax_hl = self.$syntax_highlighter();
        if ($truthy(($truthy($a = syntax_hl) ? syntax_hl['$docinfo?']("head") : $a))) {
          _buf['$<<'](syntax_hl.$docinfo("head", self, $hash2(["cdn_base_url", "linkcss", "self_closing_tag_slash"], {"cdn_base_url": cdn_base, "linkcss": linkcss, "self_closing_tag_slash": "/"})))};
        _buf['$<<']("<!--Printing and PDF exports--><script>var link = document.createElement( 'link' );\nlink.rel = 'stylesheet';\nlink.type = 'text/css';\nlink.href = window.location.search.match( /print-pdf/gi ) ? \"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/print/pdf.css\" : \"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/print/paper.css\";\ndocument.getElementsByTagName( 'head' )[0].appendChild( link );</script>");
        if ($truthy(self['$attr?']("customcss"))) {
          
          _buf['$<<']("<link rel=\"stylesheet\"");
          _slim_codeattributes8 = (function() {if ($truthy((customcss = self.$attr("customcss"))['$empty?']())) {
            return "asciidoctor-revealjs.css"
          } else {
            return customcss
          }; return nil; })();
          if ($truthy(_slim_codeattributes8)) {
            if (_slim_codeattributes8['$=='](true)) {
              _buf['$<<'](" href")
            } else {
              
              _buf['$<<'](" href=\"");
              _buf['$<<'](_slim_codeattributes8);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");};
        if ($truthy((_docinfo = self.$docinfo("head", "-revealjs.html"))['$empty?']())) {
        } else {
          _buf['$<<'](_docinfo)
        };
        _buf['$<<']("</head><body><div class=\"reveal\"><div class=\"slides\">");
        if ($truthy(self.$noheader())) {
        } else {
          
          if ($truthy((_docinfo = self.$docinfo("header", "-revealjs.html"))['$empty?']())) {
          } else {
            _buf['$<<'](_docinfo)
          };
          if ($truthy(self['$header?']())) {
            
            bg_image = (function() {if ($truthy(self['$attr?']("title-slide-background-image"))) {
              
              return self.$image_uri(self.$attr("title-slide-background-image"));
            } else {
              return nil
            }; return nil; })();
            bg_video = (function() {if ($truthy(self['$attr?']("title-slide-background-video"))) {
              
              return self.$media_uri(self.$attr("title-slide-background-video"));
            } else {
              return nil
            }; return nil; })();
            _buf['$<<']("<section");
            _temple_html_attributeremover1 = [];
            _temple_html_attributemerger1 = [];
            
            $writer = [0, "title"];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [1, []];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            _slim_codeattributes9 = self.$role();
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes9))) {
              
              _slim_codeattributes9 = _slim_codeattributes9.$flatten();
              $send(_slim_codeattributes9, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes9, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes9.$join(" "));
            } else {
              _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes9)
            };
            
            $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
            _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
            if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover1);
              _buf['$<<']("\"");};
            _buf['$<<'](" data-state=\"title\"");
            _slim_codeattributes10 = self.$attr("title-slide-transition");
            if ($truthy(_slim_codeattributes10)) {
              if (_slim_codeattributes10['$=='](true)) {
                _buf['$<<'](" data-transition")
              } else {
                
                _buf['$<<'](" data-transition=\"");
                _buf['$<<'](_slim_codeattributes10);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes11 = self.$attr("title-slide-transition-speed");
            if ($truthy(_slim_codeattributes11)) {
              if (_slim_codeattributes11['$=='](true)) {
                _buf['$<<'](" data-transition-speed")
              } else {
                
                _buf['$<<'](" data-transition-speed=\"");
                _buf['$<<'](_slim_codeattributes11);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes12 = self.$attr("title-slide-background");
            if ($truthy(_slim_codeattributes12)) {
              if (_slim_codeattributes12['$=='](true)) {
                _buf['$<<'](" data-background")
              } else {
                
                _buf['$<<'](" data-background=\"");
                _buf['$<<'](_slim_codeattributes12);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes13 = self.$attr("title-slide-background-size");
            if ($truthy(_slim_codeattributes13)) {
              if (_slim_codeattributes13['$=='](true)) {
                _buf['$<<'](" data-background-size")
              } else {
                
                _buf['$<<'](" data-background-size=\"");
                _buf['$<<'](_slim_codeattributes13);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes14 = bg_image;
            if ($truthy(_slim_codeattributes14)) {
              if (_slim_codeattributes14['$=='](true)) {
                _buf['$<<'](" data-background-image")
              } else {
                
                _buf['$<<'](" data-background-image=\"");
                _buf['$<<'](_slim_codeattributes14);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes15 = bg_video;
            if ($truthy(_slim_codeattributes15)) {
              if (_slim_codeattributes15['$=='](true)) {
                _buf['$<<'](" data-background-video")
              } else {
                
                _buf['$<<'](" data-background-video=\"");
                _buf['$<<'](_slim_codeattributes15);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes16 = self.$attr("title-slide-background-video-loop");
            if ($truthy(_slim_codeattributes16)) {
              if (_slim_codeattributes16['$=='](true)) {
                _buf['$<<'](" data-background-video-loop")
              } else {
                
                _buf['$<<'](" data-background-video-loop=\"");
                _buf['$<<'](_slim_codeattributes16);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes17 = self.$attr("title-slide-background-video-muted");
            if ($truthy(_slim_codeattributes17)) {
              if (_slim_codeattributes17['$=='](true)) {
                _buf['$<<'](" data-background-video-muted")
              } else {
                
                _buf['$<<'](" data-background-video-muted=\"");
                _buf['$<<'](_slim_codeattributes17);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes18 = self.$attr("title-slide-background-opacity");
            if ($truthy(_slim_codeattributes18)) {
              if (_slim_codeattributes18['$=='](true)) {
                _buf['$<<'](" data-background-opacity")
              } else {
                
                _buf['$<<'](" data-background-opacity=\"");
                _buf['$<<'](_slim_codeattributes18);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes19 = self.$attr("title-slide-background-iframe");
            if ($truthy(_slim_codeattributes19)) {
              if (_slim_codeattributes19['$=='](true)) {
                _buf['$<<'](" data-background-iframe")
              } else {
                
                _buf['$<<'](" data-background-iframe=\"");
                _buf['$<<'](_slim_codeattributes19);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes20 = self.$attr("title-slide-background-color");
            if ($truthy(_slim_codeattributes20)) {
              if (_slim_codeattributes20['$=='](true)) {
                _buf['$<<'](" data-background-color")
              } else {
                
                _buf['$<<'](" data-background-color=\"");
                _buf['$<<'](_slim_codeattributes20);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes21 = self.$attr("title-slide-background-repeat");
            if ($truthy(_slim_codeattributes21)) {
              if (_slim_codeattributes21['$=='](true)) {
                _buf['$<<'](" data-background-repeat")
              } else {
                
                _buf['$<<'](" data-background-repeat=\"");
                _buf['$<<'](_slim_codeattributes21);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes22 = self.$attr("title-slide-background-position");
            if ($truthy(_slim_codeattributes22)) {
              if (_slim_codeattributes22['$=='](true)) {
                _buf['$<<'](" data-background-position")
              } else {
                
                _buf['$<<'](" data-background-position=\"");
                _buf['$<<'](_slim_codeattributes22);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes23 = self.$attr("title-slide-background-transition");
            if ($truthy(_slim_codeattributes23)) {
              if (_slim_codeattributes23['$=='](true)) {
                _buf['$<<'](" data-background-transition")
              } else {
                
                _buf['$<<'](" data-background-transition=\"");
                _buf['$<<'](_slim_codeattributes23);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
            if ($truthy((_title_obj = self.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
              
              _buf['$<<']("<h1>");
              _buf['$<<'](self.$slice_text(_title_obj.$title(), (_slice = self.$header()['$option?']("slice"))));
              _buf['$<<']("</h1><h2>");
              _buf['$<<'](self.$slice_text(_title_obj.$subtitle(), _slice));
              _buf['$<<']("</h2>");
            } else {
              
              _buf['$<<']("<h1>");
              _buf['$<<'](self.header.$title());
              _buf['$<<']("</h1>");
            };
            preamble = self.document.$find_by($hash2(["context"], {"context": "preamble"}));
            if ($truthy(($truthy($a = preamble['$nil?']()) ? $a : preamble.$length()['$=='](0)))) {
            } else {
              
              _buf['$<<']("<div class=\"preamble\">");
              _buf['$<<'](preamble.$pop().$content());
              _buf['$<<']("</div>");
            };
            if ($truthy(self.$author()['$nil?']())) {
            } else {
              
              _buf['$<<']("<p class=\"author\"><small>");
              _buf['$<<'](self.$author());
              _buf['$<<']("</small></p>");
            };
            _buf['$<<']("</section>");};
        };
        _buf['$<<'](self.$content());
        if ($truthy((_docinfo = self.$docinfo("footer", "-revealjs.html"))['$empty?']())) {
        } else {
          _buf['$<<'](_docinfo)
        };
        _buf['$<<']("</div></div><script src=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/js/reveal.js\"></script><script>Array.prototype.slice.call(document.querySelectorAll('.slides section')).forEach(function(slide) {\n  if (slide.getAttribute('data-background-color')) return;\n  // user needs to explicitly say he wants CSS color to override otherwise we might break custom css or theme (#226)\n  if (!(slide.classList.contains('canvas') || slide.classList.contains('background'))) return;\n  var bgColor = getComputedStyle(slide).backgroundColor;\n  if (bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {\n    slide.setAttribute('data-background-color', bgColor);\n    slide.style.backgroundColor = 'transparent';\n  }\n});\n\n// More info about config & dependencies:\n// - https://github.com/hakimel/reveal.js#configuration\n// - https://github.com/hakimel/reveal.js#dependencies\nReveal.initialize({\n  // Display presentation control arrows\n  controls: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controls", true)));
        _buf['$<<'](",\n  // Help the user learn the controls by providing hints, for example by\n  // bouncing the down arrow when they first encounter a vertical slide\n  controlsTutorial: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controlstutorial", true)));
        _buf['$<<'](",\n  // Determines where controls appear, \"edges\" or \"bottom-right\"\n  controlsLayout: '");
        _buf['$<<'](self.$attr("revealjs_controlslayout", "bottom-right"));
        _buf['$<<']("',\n  // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\n  // or \"visible\"\n  controlsBackArrows: '");
        _buf['$<<'](self.$attr("revealjs_controlsbackarrows", "faded"));
        _buf['$<<']("',\n  // Display a presentation progress bar\n  progress: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_progress", true)));
        _buf['$<<'](",\n  // Display the page number of the current slide\n  slideNumber: ");
        _buf['$<<'](self.$to_valid_slidenumber(self.$attr("revealjs_slidenumber", false)));
        _buf['$<<'](",\n  // Control which views the slide number displays on\n  showSlideNumber: '");
        _buf['$<<'](self.$attr("revealjs_showslidenumber", "all"));
        _buf['$<<']("',\n  // Add the current slide number to the URL hash so that reloading the\n  // page/copying the URL will return you to the same slide\n  hash: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hash", false)));
        _buf['$<<'](",\n  // Push each slide change to the browser history. Implies `hash: true`\n  history: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_history", false)));
        _buf['$<<'](",\n  // Enable keyboard shortcuts for navigation\n  keyboard: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_keyboard", true)));
        _buf['$<<'](",\n  // Enable the slide overview mode\n  overview: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_overview", true)));
        _buf['$<<'](",\n  // Vertical centering of slides\n  center: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_center", true)));
        _buf['$<<'](",\n  // Enables touch navigation on devices with touch input\n  touch: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_touch", true)));
        _buf['$<<'](",\n  // Loop the presentation\n  loop: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_loop", false)));
        _buf['$<<'](",\n  // Change the presentation direction to be RTL\n  rtl: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_rtl", false)));
        _buf['$<<'](",\n  // See https://github.com/hakimel/reveal.js/#navigation-mode\n  navigationMode: '");
        _buf['$<<'](self.$attr("revealjs_navigationmode", "default"));
        _buf['$<<']("',\n  // Randomizes the order of slides each time the presentation loads\n  shuffle: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_shuffle", false)));
        _buf['$<<'](",\n  // Turns fragments on and off globally\n  fragments: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragments", true)));
        _buf['$<<'](",\n  // Flags whether to include the current fragment in the URL,\n  // so that reloading brings you to the same fragment position\n  fragmentInURL: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragmentinurl", false)));
        _buf['$<<'](",\n  // Flags if the presentation is running in an embedded mode,\n  // i.e. contained within a limited portion of the screen\n  embedded: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_embedded", false)));
        _buf['$<<'](",\n  // Flags if we should show a help overlay when the questionmark\n  // key is pressed\n  help: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_help", true)));
        _buf['$<<'](",\n  // Flags if speaker notes should be visible to all viewers\n  showNotes: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_shownotes", false)));
        _buf['$<<'](",\n  // Global override for autolaying embedded media (video/audio/iframe)\n  // - null: Media will only autoplay if data-autoplay is present\n  // - true: All media will autoplay, regardless of individual setting\n  // - false: No media will autoplay, regardless of individual setting\n  autoPlayMedia: ");
        _buf['$<<'](self.$attr("revealjs_autoplaymedia", "null"));
        _buf['$<<'](",\n  // Global override for preloading lazy-loaded iframes\n  // - null: Iframes with data-src AND data-preload will be loaded when within\n  //   the viewDistance, iframes with only data-src will be loaded when visible\n  // - true: All iframes with data-src will be loaded when within the viewDistance\n  // - false: All iframes with data-src will be loaded only when visible\n  preloadIframes: ");
        _buf['$<<'](self.$attr("revealjs_preloadiframes", "null"));
        _buf['$<<'](",\n  // Number of milliseconds between automatically proceeding to the\n  // next slide, disabled when set to 0, this value can be overwritten\n  // by using a data-autoslide attribute on your slides\n  autoSlide: ");
        _buf['$<<'](self.$attr("revealjs_autoslide", 0));
        _buf['$<<'](",\n  // Stop auto-sliding after user input\n  autoSlideStoppable: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_autoslidestoppable", true)));
        _buf['$<<'](",\n  // Use this method for navigation when auto-sliding\n  autoSlideMethod: ");
        _buf['$<<'](self.$attr("revealjs_autoslidemethod", "Reveal.navigateNext"));
        _buf['$<<'](",\n  // Specify the average time in seconds that you think you will spend\n  // presenting each slide. This is used to show a pacing timer in the\n  // speaker view\n  defaultTiming: ");
        _buf['$<<'](self.$attr("revealjs_defaulttiming", 120));
        _buf['$<<'](",\n  // Specify the total time in seconds that is available to\n  // present.  If this is set to a nonzero value, the pacing\n  // timer will work out the time available for each slide,\n  // instead of using the defaultTiming value\n  totalTime: ");
        _buf['$<<'](self.$attr("revealjs_totaltime", 0));
        _buf['$<<'](",\n  // Specify the minimum amount of time you want to allot to\n  // each slide, if using the totalTime calculation method.  If\n  // the automated time allocation causes slide pacing to fall\n  // below this threshold, then you will see an alert in the\n  // speaker notes window\n  minimumTimePerSlide: ");
        _buf['$<<'](self.$attr("revealjs_minimumtimeperslide", 0));
        _buf['$<<'](",\n  // Enable slide navigation via mouse wheel\n  mouseWheel: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_mousewheel", false)));
        _buf['$<<'](",\n  // Hide cursor if inactive\n  hideInactiveCursor: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hideinactivecursor", true)));
        _buf['$<<'](",\n  // Time before the cursor is hidden (in ms)\n  hideCursorTime: ");
        _buf['$<<'](self.$attr("revealjs_hidecursortime", 5000));
        _buf['$<<'](",\n  // Hides the address bar on mobile devices\n  hideAddressBar: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hideaddressbar", true)));
        _buf['$<<'](",\n  // Opens links in an iframe preview overlay\n  // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link\n  // individually\n  previewLinks: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_previewlinks", false)));
        _buf['$<<'](",\n  // Transition style (e.g., none, fade, slide, convex, concave, zoom)\n  transition: '");
        _buf['$<<'](self.$attr("revealjs_transition", "slide"));
        _buf['$<<']("',\n  // Transition speed (e.g., default, fast, slow)\n  transitionSpeed: '");
        _buf['$<<'](self.$attr("revealjs_transitionspeed", "default"));
        _buf['$<<']("',\n  // Transition style for full page slide backgrounds (e.g., none, fade, slide, convex, concave, zoom)\n  backgroundTransition: '");
        _buf['$<<'](self.$attr("revealjs_backgroundtransition", "fade"));
        _buf['$<<']("',\n  // Number of slides away from the current that are visible\n  viewDistance: ");
        _buf['$<<'](self.$attr("revealjs_viewdistance", 3));
        _buf['$<<'](",\n  // Number of slides away from the current that are visible on mobile\n  // devices. It is advisable to set this to a lower number than\n  // viewDistance in order to save resources.\n  mobileViewDistance: ");
        _buf['$<<'](self.$attr("revealjs_mobileviewdistance", 3));
        _buf['$<<'](",\n  // Parallax background image (e.g., \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\")\n  parallaxBackgroundImage: '");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundimage", ""));
        _buf['$<<']("',\n  // Parallax background size in CSS syntax (e.g., \"2100px 900px\")\n  parallaxBackgroundSize: '");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundsize", ""));
        _buf['$<<']("',\n  // Number of pixels to move the parallax background per slide\n  // - Calculated automatically unless specified\n  // - Set to 0 to disable movement along an axis\n  parallaxBackgroundHorizontal: ");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundhorizontal", "null"));
        _buf['$<<'](",\n  parallaxBackgroundVertical: ");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundvertical", "null"));
        _buf['$<<'](",\n  // The display mode that will be used to show slides\n  display: '");
        _buf['$<<'](self.$attr("revealjs_display", "block"));
        _buf['$<<']("',\n\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\n  // when the presentation is scaled to fit different resolutions. Can be\n  // specified using percentage units.\n  width: ");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](",\n  height: ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](",\n\n  // Factor of the display size that should remain empty around the content\n  margin: ");
        _buf['$<<'](self.$attr("revealjs_margin", 0.1));
        _buf['$<<'](",\n\n  // Bounds for smallest/largest possible scale to apply to content\n  minScale: ");
        _buf['$<<'](self.$attr("revealjs_minscale", 0.2));
        _buf['$<<'](",\n  maxScale: ");
        _buf['$<<'](self.$attr("revealjs_maxscale", 1.5));
        _buf['$<<'](",\n\n  // PDF Export Options\n  // Put each fragment on a separate page\n  pdfSeparateFragments: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_pdfseparatefragments", true)));
        _buf['$<<'](",\n  // For slides that do not fit on a page, max number of pages\n  pdfMaxPagesPerSlide: ");
        _buf['$<<'](self.$attr("revealjs_pdfmaxpagesperslide", 1));
        _buf['$<<'](",\n\n  // Optional libraries used to extend on reveal.js\n  dependencies: [\n      ");
        _buf['$<<'](self.$revealjs_dependencies(self.$document(), self, revealjsdir));
        _buf['$<<']("\n  ],\n\n  ");
        _buf['$<<']((function() {if ($truthy(self['$attr?']("revealjs_plugins_configuration"))) {
          return $$($nesting, 'File').$read(self.$attr("revealjs_plugins_configuration", ""))
        } else {
          return ""
        }; return nil; })());
        _buf['$<<']("\n\n});</script><script>var dom = {};\ndom.slides = document.querySelector('.reveal .slides');\n\nfunction getRemainingHeight(element, slideElement, height) {\n  height = height || 0;\n  if (element) {\n    var newHeight, oldHeight = element.style.height;\n    // Change the .stretch element height to 0 in order find the height of all\n    // the other elements\n    element.style.height = '0px';\n    // In Overview mode, the parent (.slide) height is set of 700px.\n    // Restore it temporarily to its natural height.\n    slideElement.style.height = 'auto';\n    newHeight = height - slideElement.offsetHeight;\n    // Restore the old height, just in case\n    element.style.height = oldHeight + 'px';\n    // Clear the parent (.slide) height. .removeProperty works in IE9+\n    slideElement.style.removeProperty('height');\n    return newHeight;\n  }\n  return height;\n}\n\nfunction layoutSlideContents(width, height) {\n  // Handle sizing of elements with the 'stretch' class\n  toArray(dom.slides.querySelectorAll('section .stretch')).forEach(function (element) {\n    // Determine how much vertical space we can use\n    var limit = 5; // hard limit\n    var parent = element.parentNode;\n    while (parent.nodeName !== 'SECTION' && limit > 0) {\n      parent = parent.parentNode;\n      limit--;\n    }\n    if (limit === 0) {\n      // unable to find parent, aborting!\n      return;\n    }\n    var remainingHeight = getRemainingHeight(element, parent, height);\n    // Consider the aspect ratio of media elements\n    if (/(img|video)/gi.test(element.nodeName)) {\n      var nw = element.naturalWidth || element.videoWidth, nh = element.naturalHeight || element.videoHeight;\n      var es = Math.min(width / nw, remainingHeight / nh);\n      element.style.width = (nw * es) + 'px';\n      element.style.height = (nh * es) + 'px';\n    } else {\n      element.style.width = width + 'px';\n      element.style.height = remainingHeight + 'px';\n    }\n  });\n}\n\nfunction toArray(o) {\n  return Array.prototype.slice.call(o);\n}\n\nReveal.addEventListener('slidechanged', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('ready', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('resize', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});</script>");
        if ($truthy(($truthy($a = syntax_hl) ? syntax_hl['$docinfo?']("footer") : $a))) {
          _buf['$<<'](syntax_hl.$docinfo("footer", self, $hash2(["cdn_base_url", "linkcss", "self_closing_tag_slash"], {"cdn_base_url": cdn_base, "linkcss": linkcss, "self_closing_tag_slash": "/"})))};
        if ($truthy((docinfo_content = self.$docinfo("footer", ".html"))['$empty?']())) {
        } else {
          _buf['$<<'](docinfo_content)
        };
        _buf['$<<']("</body></html>");
        return (_buf = _buf.$join(""));}, $$69.$$s = self, $$69.$$arity = 0, $$69));
    }, $Converter_document$68.$$arity = -2);
    
    Opal.def(self, '$inline_callout', $Converter_inline_callout$71 = function $$inline_callout(node, opts) {
      var $$72, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$72 = function(){var self = $$72.$$s || this, _buf = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.document['$attr?']("icons", "font"))) {
          
          _buf['$<<']("<i class=\"conum\"");
          _slim_codeattributes1 = self.text;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" data-value")
            } else {
              
              _buf['$<<'](" data-value=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("></i><b>");
          _buf['$<<']("" + "(" + (self.text) + ")");
          _buf['$<<']("</b>");
        } else if ($truthy(self.document['$attr?']("icons"))) {
          
          _buf['$<<']("<img");
          _slim_codeattributes2 = self.$icon_uri("" + "callouts/" + (self.text));
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" src")
            } else {
              
              _buf['$<<'](" src=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes3 = self.text;
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" alt")
            } else {
              
              _buf['$<<'](" alt=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
        } else {
          
          _buf['$<<']("<b>");
          _buf['$<<']("" + "(" + (self.text) + ")");
          _buf['$<<']("</b>");
        };
        return (_buf = _buf.$join(""));}, $$72.$$s = self, $$72.$$arity = 0, $$72));
    }, $Converter_inline_callout$71.$$arity = -2);
    
    Opal.def(self, '$notes', $Converter_notes$73 = function $$notes(node, opts) {
      var $$74, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$74 = function(){var self = $$74.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<aside class=\"notes\">");
        _buf['$<<'](self.$resolve_content());
        _buf['$<<']("</aside>");
        return (_buf = _buf.$join(""));}, $$74.$$s = self, $$74.$$arity = 0, $$74));
    }, $Converter_notes$73.$$arity = -2);
    
    Opal.def(self, '$inline_image', $Converter_inline_image$75 = function $$inline_image(node, opts) {
      var $$76, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$76 = function(){var self = $$76.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, style_class = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, src = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, _slim_codeattributes24 = nil, _slim_codeattributes25 = nil;
        if (self.type == null) self.type = nil;
        if (self.document == null) self.document = nil;
        if (self.target == null) self.target = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<span");
        _temple_html_attributeremover1 = [];
        _slim_codeattributes1 = [self.type, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = (function() {if ($truthy(self['$attr?']("float"))) {
          return "" + "float: " + (self.$attr("float"))
        } else {
          return nil
        }; return nil; })();
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" style")
          } else {
            
            _buf['$<<'](" style=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy((($a = self.type['$==']("icon")) ? self.document['$attr?']("icons", "font") : self.type['$==']("icon")))) {
          
          style_class = ["" + "fa fa-" + (self.target)];
          if ($truthy(self['$attr?']("size"))) {
            style_class['$<<']("" + "fa-" + (self.$attr("size")))};
          if ($truthy(self['$attr?']("rotate"))) {
            style_class['$<<']("" + "fa-rotate-" + (self.$attr("rotate")))};
          if ($truthy(self['$attr?']("flip"))) {
            style_class['$<<']("" + "fa-flip-" + (self.$attr("flip")))};
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"");
            _slim_codeattributes3 = self.$attr("link");
            if ($truthy(_slim_codeattributes3)) {
              if (_slim_codeattributes3['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes3);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes4 = self.$attr("window");
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" target")
              } else {
                
                _buf['$<<'](" target=\"");
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes5 = self.$bool_data_attr("link_preview");
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" data-preview-link")
              } else {
                
                _buf['$<<'](" data-preview-link=\"");
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("><i");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes6 = style_class;
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes6))) {
              
              _slim_codeattributes6 = _slim_codeattributes6.$flatten();
              $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes6.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes6)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover2);
              _buf['$<<']("\"");};
            _slim_codeattributes7 = self.$attr("title");
            if ($truthy(_slim_codeattributes7)) {
              if (_slim_codeattributes7['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes7);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></i></a>");
          } else {
            
            _buf['$<<']("<i");
            _temple_html_attributeremover3 = [];
            _slim_codeattributes8 = style_class;
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes8))) {
              
              _slim_codeattributes8 = _slim_codeattributes8.$flatten();
              $send(_slim_codeattributes8, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes8, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover3['$<<'](_slim_codeattributes8.$join(" "));
            } else {
              _temple_html_attributeremover3['$<<'](_slim_codeattributes8)
            };
            _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
            if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover3);
              _buf['$<<']("\"");};
            _slim_codeattributes9 = self.$attr("title");
            if ($truthy(_slim_codeattributes9)) {
              if (_slim_codeattributes9['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes9);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></i>");
          };
        } else if ($truthy((($a = self.type['$==']("icon")) ? self.document['$attr?']("icons")['$!']() : self.type['$==']("icon")))) {
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"");
            _slim_codeattributes10 = self.$attr("link");
            if ($truthy(_slim_codeattributes10)) {
              if (_slim_codeattributes10['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes10);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes11 = self.$attr("window");
            if ($truthy(_slim_codeattributes11)) {
              if (_slim_codeattributes11['$=='](true)) {
                _buf['$<<'](" target")
              } else {
                
                _buf['$<<'](" target=\"");
                _buf['$<<'](_slim_codeattributes11);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes12 = self.$bool_data_attr("link_preview");
            if ($truthy(_slim_codeattributes12)) {
              if (_slim_codeattributes12['$=='](true)) {
                _buf['$<<'](" data-preview-link")
              } else {
                
                _buf['$<<'](" data-preview-link=\"");
                _buf['$<<'](_slim_codeattributes12);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">[");
            _buf['$<<'](self.$attr("alt"));
            _buf['$<<']("]</a>");
          } else {
            
            _buf['$<<']("[");
            _buf['$<<'](self.$attr("alt"));
            _buf['$<<']("]");
          }
        } else {
          
          src = (function() {if (self.type['$==']("icon")) {
            
            return self.$icon_uri(self.target);
          } else {
            
            return self.$image_uri(self.target);
          }; return nil; })();
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"");
            _slim_codeattributes13 = self.$attr("link");
            if ($truthy(_slim_codeattributes13)) {
              if (_slim_codeattributes13['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes13);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes14 = self.$attr("window");
            if ($truthy(_slim_codeattributes14)) {
              if (_slim_codeattributes14['$=='](true)) {
                _buf['$<<'](" target")
              } else {
                
                _buf['$<<'](" target=\"");
                _buf['$<<'](_slim_codeattributes14);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes15 = self.$bool_data_attr("link_preview");
            if ($truthy(_slim_codeattributes15)) {
              if (_slim_codeattributes15['$=='](true)) {
                _buf['$<<'](" data-preview-link")
              } else {
                
                _buf['$<<'](" data-preview-link=\"");
                _buf['$<<'](_slim_codeattributes15);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("><img");
            _slim_codeattributes16 = src;
            if ($truthy(_slim_codeattributes16)) {
              if (_slim_codeattributes16['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes16);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes17 = self.$attr("alt");
            if ($truthy(_slim_codeattributes17)) {
              if (_slim_codeattributes17['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes17);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes18 = self.$attr("width");
            if ($truthy(_slim_codeattributes18)) {
              if (_slim_codeattributes18['$=='](true)) {
                _buf['$<<'](" width")
              } else {
                
                _buf['$<<'](" width=\"");
                _buf['$<<'](_slim_codeattributes18);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes19 = self.$attr("height");
            if ($truthy(_slim_codeattributes19)) {
              if (_slim_codeattributes19['$=='](true)) {
                _buf['$<<'](" height")
              } else {
                
                _buf['$<<'](" height=\"");
                _buf['$<<'](_slim_codeattributes19);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes20 = self.$attr("title");
            if ($truthy(_slim_codeattributes20)) {
              if (_slim_codeattributes20['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes20);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></a>");
          } else {
            
            _buf['$<<']("<img");
            _slim_codeattributes21 = src;
            if ($truthy(_slim_codeattributes21)) {
              if (_slim_codeattributes21['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes21);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes22 = self.$attr("alt");
            if ($truthy(_slim_codeattributes22)) {
              if (_slim_codeattributes22['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes22);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes23 = self.$attr("width");
            if ($truthy(_slim_codeattributes23)) {
              if (_slim_codeattributes23['$=='](true)) {
                _buf['$<<'](" width")
              } else {
                
                _buf['$<<'](" width=\"");
                _buf['$<<'](_slim_codeattributes23);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes24 = self.$attr("height");
            if ($truthy(_slim_codeattributes24)) {
              if (_slim_codeattributes24['$=='](true)) {
                _buf['$<<'](" height")
              } else {
                
                _buf['$<<'](" height=\"");
                _buf['$<<'](_slim_codeattributes24);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes25 = self.$attr("title");
            if ($truthy(_slim_codeattributes25)) {
              if (_slim_codeattributes25['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes25);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          };
        };
        _buf['$<<']("</span>");
        return (_buf = _buf.$join(""));}, $$76.$$s = self, $$76.$$arity = 0, $$76));
    }, $Converter_inline_image$75.$$arity = -2);
    
    Opal.def(self, '$video', $Converter_video$77 = function $$video(node, opts) {
      var $$78, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$78 = function(){var self = $$78.$$s || this, $a, _buf = nil, no_stretch = nil, width = nil, height = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, loop_param = nil, src = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, params = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        no_stretch = ($truthy($a = self['$attr?']("width")) ? $a : self['$attr?']("height"));
        width = (function() {if ($truthy(self['$attr?']("width"))) {
          
          return self.$attr("width");
        } else {
          return "100%"
        }; return nil; })();
        height = (function() {if ($truthy(self['$attr?']("height"))) {
          
          return self.$attr("height");
        } else {
          return "100%"
        }; return nil; })();
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "videoblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role(), (function() {if ($truthy(no_stretch)) {
          return nil
        } else {
          return "stretch"
        }; return nil; })()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>");};
        $case = self.$attr("poster");
        if ("vimeo"['$===']($case)) {
        if ($truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        start_anchor = (function() {if ($truthy(self['$attr?']("start"))) {
          return "" + "#at=" + (self.$attr("start"))
        } else {
          return nil
        }; return nil; })();
        delimiter = "?";
        loop_param = (function() {if ($truthy(self['$option?']("loop"))) {
          return "" + (delimiter) + "loop=1"
        } else {
          return nil
        }; return nil; })();
        src = "" + (asset_uri_scheme) + "//player.vimeo.com/video/" + (self.$attr("target")) + (start_anchor) + (loop_param);
        _buf['$<<']("<iframe");
        _slim_codeattributes3 = width;
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" width")
          } else {
            
            _buf['$<<'](" width=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes4 = height;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" height")
          } else {
            
            _buf['$<<'](" height=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes5 = src;
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" src")
          } else {
            
            _buf['$<<'](" src=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes6 = 0;
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" frameborder")
          } else {
            
            _buf['$<<'](" frameborder=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](" webkitAllowFullScreen mozallowfullscreen allowFullScreen");
        _slim_codeattributes7 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes7)) {
          if (_slim_codeattributes7['$=='](true)) {
            _buf['$<<'](" data-autoplay")
          } else {
            
            _buf['$<<'](" data-autoplay=\"");
            _buf['$<<'](_slim_codeattributes7);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("></iframe>");}
        else if ("youtube"['$===']($case)) {
        if ($truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        params = ["rel=0"];
        if ($truthy(self['$attr?']("start"))) {
          params['$<<']("" + "start=" + (self.$attr("start")))};
        if ($truthy(self['$attr?']("end"))) {
          params['$<<']("" + "end=" + (self.$attr("end")))};
        if ($truthy(self['$option?']("loop"))) {
          params['$<<']("loop=1")};
        if ($truthy(self['$option?']("nocontrols"))) {
          params['$<<']("controls=0")};
        src = "" + (asset_uri_scheme) + "//www.youtube.com/embed/" + (self.$attr("target")) + "?" + ($rb_times(params, "&amp;"));
        _buf['$<<']("<iframe");
        _slim_codeattributes8 = width;
        if ($truthy(_slim_codeattributes8)) {
          if (_slim_codeattributes8['$=='](true)) {
            _buf['$<<'](" width")
          } else {
            
            _buf['$<<'](" width=\"");
            _buf['$<<'](_slim_codeattributes8);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes9 = height;
        if ($truthy(_slim_codeattributes9)) {
          if (_slim_codeattributes9['$=='](true)) {
            _buf['$<<'](" height")
          } else {
            
            _buf['$<<'](" height=\"");
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes10 = src;
        if ($truthy(_slim_codeattributes10)) {
          if (_slim_codeattributes10['$=='](true)) {
            _buf['$<<'](" src")
          } else {
            
            _buf['$<<'](" src=\"");
            _buf['$<<'](_slim_codeattributes10);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes11 = 0;
        if ($truthy(_slim_codeattributes11)) {
          if (_slim_codeattributes11['$=='](true)) {
            _buf['$<<'](" frameborder")
          } else {
            
            _buf['$<<'](" frameborder=\"");
            _buf['$<<'](_slim_codeattributes11);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes12 = self['$option?']("nofullscreen")['$!']();
        if ($truthy(_slim_codeattributes12)) {
          if (_slim_codeattributes12['$=='](true)) {
            _buf['$<<'](" allowfullscreen")
          } else {
            
            _buf['$<<'](" allowfullscreen=\"");
            _buf['$<<'](_slim_codeattributes12);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes13 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes13)) {
          if (_slim_codeattributes13['$=='](true)) {
            _buf['$<<'](" data-autoplay")
          } else {
            
            _buf['$<<'](" data-autoplay=\"");
            _buf['$<<'](_slim_codeattributes13);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("></iframe>");}
        else {
        _buf['$<<']("<video");
        _slim_codeattributes14 = self.$media_uri(self.$attr("target"));
        if ($truthy(_slim_codeattributes14)) {
          if (_slim_codeattributes14['$=='](true)) {
            _buf['$<<'](" src")
          } else {
            
            _buf['$<<'](" src=\"");
            _buf['$<<'](_slim_codeattributes14);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes15 = width;
        if ($truthy(_slim_codeattributes15)) {
          if (_slim_codeattributes15['$=='](true)) {
            _buf['$<<'](" width")
          } else {
            
            _buf['$<<'](" width=\"");
            _buf['$<<'](_slim_codeattributes15);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes16 = height;
        if ($truthy(_slim_codeattributes16)) {
          if (_slim_codeattributes16['$=='](true)) {
            _buf['$<<'](" height")
          } else {
            
            _buf['$<<'](" height=\"");
            _buf['$<<'](_slim_codeattributes16);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes17 = (function() {if ($truthy(self.$attr("poster"))) {
          return self.$media_uri(self.$attr("poster"))
        } else {
          return nil
        }; return nil; })();
        if ($truthy(_slim_codeattributes17)) {
          if (_slim_codeattributes17['$=='](true)) {
            _buf['$<<'](" poster")
          } else {
            
            _buf['$<<'](" poster=\"");
            _buf['$<<'](_slim_codeattributes17);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes18 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes18)) {
          if (_slim_codeattributes18['$=='](true)) {
            _buf['$<<'](" data-autoplay")
          } else {
            
            _buf['$<<'](" data-autoplay=\"");
            _buf['$<<'](_slim_codeattributes18);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes19 = self['$option?']("nocontrols")['$!']();
        if ($truthy(_slim_codeattributes19)) {
          if (_slim_codeattributes19['$=='](true)) {
            _buf['$<<'](" controls")
          } else {
            
            _buf['$<<'](" controls=\"");
            _buf['$<<'](_slim_codeattributes19);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes20 = self['$option?']("loop");
        if ($truthy(_slim_codeattributes20)) {
          if (_slim_codeattributes20['$=='](true)) {
            _buf['$<<'](" loop")
          } else {
            
            _buf['$<<'](" loop=\"");
            _buf['$<<'](_slim_codeattributes20);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">Your browser does not support the video tag.</video>");};
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, $$78.$$s = self, $$78.$$arity = 0, $$78));
    }, $Converter_video$77.$$arity = -2);
    
    Opal.def(self, '$literal', $Converter_literal$79 = function $$literal(node, opts) {
      var $$80, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$80 = function(){var self = $$80.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "literalblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<div class=\"content\"><pre");
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = (function() {if ($truthy(($truthy($a = self.document['$attr?']("prewrap")['$!']()) ? $a : self['$option?']("nowrap")))) {
          return "nowrap"
        } else {
          return nil
        }; return nil; })();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
        };
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.$content());
        _buf['$<<']("</pre></div></div>");
        return (_buf = _buf.$join(""));}, $$80.$$s = self, $$80.$$arity = 0, $$80));
    }, $Converter_literal$79.$$arity = -2);
    
    Opal.def(self, '$floating_title', $Converter_floating_title$81 = function $$floating_title(node, opts) {
      var $$82, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$82 = function(){var self = $$82.$$s || this, _buf = nil, _slim_htag_filter1 = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_htag_filter1 = $rb_plus(self.$level(), 1).$to_s();
        _buf['$<<']("<h");
        _buf['$<<'](_slim_htag_filter1);
        _slim_codeattributes1 = self.$id();
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = [self.$style(), self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.$title());
        _buf['$<<']("</h");
        _buf['$<<'](_slim_htag_filter1);
        _buf['$<<'](">");
        return (_buf = _buf.$join(""));}, $$82.$$s = self, $$82.$$arity = 0, $$82));
    }, $Converter_floating_title$81.$$arity = -2);
    
    Opal.def(self, '$embedded', $Converter_embedded$83 = function $$embedded(node, opts) {
      var $$84, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$84 = function(){var self = $$84.$$s || this, $a, $$85, _buf = nil, _slim_codeattributes1 = nil;
        if (self.id == null) self.id = nil;
        if (self.header == null) self.header = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = self.$notitle()) ? $a : self['$has_header?']()['$!']()))) {
        } else {
          
          _buf['$<<']("<h1");
          _slim_codeattributes1 = self.id;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          _buf['$<<'](self.header.$title());
          _buf['$<<']("</h1>");
        };
        _buf['$<<'](self.$content());
        if ($truthy(($truthy($a = self['$footnotes?']()['$!']()) ? $a : self['$attr?']("nofootnotes")))) {
        } else {
          
          _buf['$<<']("<div id=\"footnotes\"><hr>");
          $send(self.$footnotes(), 'each', [], ($$85 = function(fn){var self = $$85.$$s || this;

          
            
            if (fn == null) {
              fn = nil;
            };
            _buf['$<<']("<div class=\"footnote\" id=\"_footnote_");
            _buf['$<<'](fn.$index());
            _buf['$<<']("\"><a href=\"#_footnoteref_");
            _buf['$<<'](fn.$index());
            _buf['$<<']("\">");
            _buf['$<<'](fn.$index());
            _buf['$<<']("</a>. ");
            _buf['$<<'](fn.$text());
            return _buf['$<<']("</div>");}, $$85.$$s = self, $$85.$$arity = 1, $$85));
          _buf['$<<']("</div>");
        };
        return (_buf = _buf.$join(""));}, $$84.$$s = self, $$84.$$arity = 0, $$84));
    }, $Converter_embedded$83.$$arity = -2);
    
    Opal.def(self, '$title_slide', $Converter_title_slide$86 = function $$title_slide(node, opts) {
      var $$87, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$87 = function(){var self = $$87.$$s || this, $a, _buf = nil, bg_image = nil, bg_video = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _title_obj = nil, _slice = nil, preamble = nil;
        if (self.header == null) self.header = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        bg_image = (function() {if ($truthy(self['$attr?']("title-slide-background-image"))) {
          
          return self.$image_uri(self.$attr("title-slide-background-image"));
        } else {
          return nil
        }; return nil; })();
        bg_video = (function() {if ($truthy(self['$attr?']("title-slide-background-video"))) {
          
          return self.$media_uri(self.$attr("title-slide-background-video"));
        } else {
          return nil
        }; return nil; })();
        _buf['$<<']("<section");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "title"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<'](" data-state=\"title\"");
        _slim_codeattributes2 = self.$attr("title-slide-transition");
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" data-transition")
          } else {
            
            _buf['$<<'](" data-transition=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes3 = self.$attr("title-slide-transition-speed");
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" data-transition-speed")
          } else {
            
            _buf['$<<'](" data-transition-speed=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes4 = self.$attr("title-slide-background");
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" data-background")
          } else {
            
            _buf['$<<'](" data-background=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes5 = self.$attr("title-slide-background-size");
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" data-background-size")
          } else {
            
            _buf['$<<'](" data-background-size=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes6 = bg_image;
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" data-background-image")
          } else {
            
            _buf['$<<'](" data-background-image=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes7 = bg_video;
        if ($truthy(_slim_codeattributes7)) {
          if (_slim_codeattributes7['$=='](true)) {
            _buf['$<<'](" data-background-video")
          } else {
            
            _buf['$<<'](" data-background-video=\"");
            _buf['$<<'](_slim_codeattributes7);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes8 = self.$attr("title-slide-background-video-loop");
        if ($truthy(_slim_codeattributes8)) {
          if (_slim_codeattributes8['$=='](true)) {
            _buf['$<<'](" data-background-video-loop")
          } else {
            
            _buf['$<<'](" data-background-video-loop=\"");
            _buf['$<<'](_slim_codeattributes8);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes9 = self.$attr("title-slide-background-video-muted");
        if ($truthy(_slim_codeattributes9)) {
          if (_slim_codeattributes9['$=='](true)) {
            _buf['$<<'](" data-background-video-muted")
          } else {
            
            _buf['$<<'](" data-background-video-muted=\"");
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes10 = self.$attr("title-slide-background-opacity");
        if ($truthy(_slim_codeattributes10)) {
          if (_slim_codeattributes10['$=='](true)) {
            _buf['$<<'](" data-background-opacity")
          } else {
            
            _buf['$<<'](" data-background-opacity=\"");
            _buf['$<<'](_slim_codeattributes10);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes11 = self.$attr("title-slide-background-iframe");
        if ($truthy(_slim_codeattributes11)) {
          if (_slim_codeattributes11['$=='](true)) {
            _buf['$<<'](" data-background-iframe")
          } else {
            
            _buf['$<<'](" data-background-iframe=\"");
            _buf['$<<'](_slim_codeattributes11);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes12 = self.$attr("title-slide-background-color");
        if ($truthy(_slim_codeattributes12)) {
          if (_slim_codeattributes12['$=='](true)) {
            _buf['$<<'](" data-background-color")
          } else {
            
            _buf['$<<'](" data-background-color=\"");
            _buf['$<<'](_slim_codeattributes12);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes13 = self.$attr("title-slide-background-repeat");
        if ($truthy(_slim_codeattributes13)) {
          if (_slim_codeattributes13['$=='](true)) {
            _buf['$<<'](" data-background-repeat")
          } else {
            
            _buf['$<<'](" data-background-repeat=\"");
            _buf['$<<'](_slim_codeattributes13);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes14 = self.$attr("title-slide-background-position");
        if ($truthy(_slim_codeattributes14)) {
          if (_slim_codeattributes14['$=='](true)) {
            _buf['$<<'](" data-background-position")
          } else {
            
            _buf['$<<'](" data-background-position=\"");
            _buf['$<<'](_slim_codeattributes14);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes15 = self.$attr("title-slide-background-transition");
        if ($truthy(_slim_codeattributes15)) {
          if (_slim_codeattributes15['$=='](true)) {
            _buf['$<<'](" data-background-transition")
          } else {
            
            _buf['$<<'](" data-background-transition=\"");
            _buf['$<<'](_slim_codeattributes15);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy((_title_obj = self.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
          
          _buf['$<<']("<h1>");
          _buf['$<<'](self.$slice_text(_title_obj.$title(), (_slice = self.$header()['$option?']("slice"))));
          _buf['$<<']("</h1><h2>");
          _buf['$<<'](self.$slice_text(_title_obj.$subtitle(), _slice));
          _buf['$<<']("</h2>");
        } else {
          
          _buf['$<<']("<h1>");
          _buf['$<<'](self.header.$title());
          _buf['$<<']("</h1>");
        };
        preamble = self.document.$find_by($hash2(["context"], {"context": "preamble"}));
        if ($truthy(($truthy($a = preamble['$nil?']()) ? $a : preamble.$length()['$=='](0)))) {
        } else {
          
          _buf['$<<']("<div class=\"preamble\">");
          _buf['$<<'](preamble.$pop().$content());
          _buf['$<<']("</div>");
        };
        if ($truthy(self.$author()['$nil?']())) {
        } else {
          
          _buf['$<<']("<p class=\"author\"><small>");
          _buf['$<<'](self.$author());
          _buf['$<<']("</small></p>");
        };
        _buf['$<<']("</section>");
        return (_buf = _buf.$join(""));}, $$87.$$s = self, $$87.$$arity = 0, $$87));
    }, $Converter_title_slide$86.$$arity = -2);
    
    Opal.def(self, '$sidebar', $Converter_sidebar$88 = function $$sidebar(node, opts) {
      var $$89, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$89 = function(){var self = $$89.$$s || this, $a, $b, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _buf['$<<']("<div");
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "sidebarblock"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes1 = self.$role();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
          };
          
          $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes2 = self.id;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("><div class=\"content\">");
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$title());
            _buf['$<<']("</div>");};
          _buf['$<<'](self.$content());
          _buf['$<<']("</div></div>");
        };
        return (_buf = _buf.$join(""));}, $$89.$$s = self, $$89.$$arity = 0, $$89));
    }, $Converter_sidebar$88.$$arity = -2);
    
    Opal.def(self, '$outline', $Converter_outline$90 = function $$outline(node, opts) {
      var $$91, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$91 = function(){var self = $$91.$$s || this, $a, $$92, _buf = nil, toclevels = nil, slevel = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.$sections()['$empty?']())) {
        } else {
          
          toclevels = ($truthy($a = toclevels) ? $a : self.$document().$attr("toclevels", $$($nesting, 'DEFAULT_TOCLEVELS')).$to_i());
          slevel = self.$section_level(self.$sections().$first());
          _buf['$<<']("<ol class=\"sectlevel");
          _buf['$<<'](slevel);
          _buf['$<<']("\">");
          $send(self.$sections(), 'each', [], ($$92 = function(sec){var self = $$92.$$s || this, $b, child_toc = nil;

          
            
            if (sec == null) {
              sec = nil;
            };
            _buf['$<<']("<li><a href=\"#");
            _buf['$<<'](sec.$id());
            _buf['$<<']("\">");
            _buf['$<<'](self.$section_title(sec));
            _buf['$<<']("</a>");
            if ($truthy(($truthy($b = $rb_lt(sec.$level(), toclevels)) ? (child_toc = self.$converter().$convert(sec, "outline")) : $b))) {
              _buf['$<<'](child_toc)};
            return _buf['$<<']("</li>");}, $$92.$$s = self, $$92.$$arity = 1, $$92));
          _buf['$<<']("</ol>");
        };
        return (_buf = _buf.$join(""));}, $$91.$$s = self, $$91.$$arity = 0, $$91));
    }, $Converter_outline$90.$$arity = -2);
    
    Opal.def(self, '$listing', $Converter_listing$93 = function $$listing(node, opts) {
      var $$94, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$94 = function(){var self = $$94.$$s || this, $a, _buf = nil, nowrap = nil, syntax_hl = nil, lang = nil, doc_attrs = nil, css_mode = nil, style = nil, $writer = nil, pre_open = nil, pre_close = nil, id_attribute = nil, title_element = nil, role = nil;
        if (self.style == null) self.style = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        nowrap = ($truthy($a = self['$option?']("nowrap")) ? $a : self.$document()['$attr?']("prewrap")['$!']());
        if (self.style['$==']("source")) {
          
          syntax_hl = self.$document().$syntax_highlighter();
          lang = self.$attr("language");
          if ($truthy(syntax_hl)) {
            
            doc_attrs = self.$document().$attributes();
            css_mode = ($truthy($a = doc_attrs['$[]']("" + (syntax_hl.$name()) + "-css")) ? $a : "class").$to_sym();
            style = doc_attrs['$[]']("" + (syntax_hl.$name()) + "-style");
            opts = (function() {if ($truthy(syntax_hl['$highlight?']())) {
              return $hash2(["css_mode", "style"], {"css_mode": css_mode, "style": style})
            } else {
              return $hash2([], {})
            }; return nil; })();
            
            $writer = ["nowrap", nowrap];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          } else {
            
            pre_open = "" + "<pre class=\"highlight" + ((function() {if ($truthy(nowrap)) {
              return " nowrap"
            } else {
              return ""
            }; return nil; })()) + "\"><code" + ((function() {if ($truthy(lang)) {
              return "" + " class=\"language-" + (lang) + "\" data-lang=\"" + (lang) + "\""
            } else {
              return ""
            }; return nil; })()) + ">";
            pre_close = "</code></pre>";
          };
        } else {
          
          pre_open = "" + "<pre" + ((function() {if ($truthy(nowrap)) {
            return " class=\"nowrap\""
          } else {
            return ""
          }; return nil; })()) + ">";
          pre_close = "</pre>";
        };
        id_attribute = (function() {if ($truthy(self.$id())) {
          return "" + " id=\"" + (self.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        title_element = (function() {if ($truthy(self['$title?']())) {
          return "" + "<div class=\"title\">" + (self.$captioned_title()) + "</div>\n"
        } else {
          return ""
        }; return nil; })();
        _buf['$<<']("" + "<div" + (id_attribute) + " class=\"listingblock" + ((function() {if ($truthy((role = self.$role()))) {
          return "" + " " + (role)
        } else {
          return ""
        }; return nil; })()) + "\">" + (title_element) + "<div class=\"content\">" + ((function() {if ($truthy(syntax_hl)) {
          
          return syntax_hl.$format(self, lang, opts);
        } else {
          return $rb_plus($rb_plus(pre_open, ($truthy($a = self.$content()) ? $a : "")), pre_close)
        }; return nil; })()) + "</div></div>");
        return (_buf = _buf.$join(""));}, $$94.$$s = self, $$94.$$arity = 0, $$94));
    }, $Converter_listing$93.$$arity = -2);
    
    Opal.def(self, '$inline_kbd', $Converter_inline_kbd$95 = function $$inline_kbd(node, opts) {
      var $$96, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$96 = function(){var self = $$96.$$s || this, $$97, _buf = nil, keys = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ((keys = self.$attr("keys")).$size()['$=='](1)) {
          
          _buf['$<<']("<kbd>");
          _buf['$<<'](keys.$first());
          _buf['$<<']("</kbd>");
        } else {
          
          _buf['$<<']("<span class=\"keyseq\">");
          $send(keys, 'each_with_index', [], ($$97 = function(key, idx){var self = $$97.$$s || this;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(idx['$zero?']())) {
            } else {
              _buf['$<<']("+")
            };
            _buf['$<<']("<kbd>");
            _buf['$<<'](key);
            return _buf['$<<']("</kbd>");}, $$97.$$s = self, $$97.$$arity = 2, $$97));
          _buf['$<<']("</span>");
        };
        return (_buf = _buf.$join(""));}, $$96.$$s = self, $$96.$$arity = 0, $$96));
    }, $Converter_inline_kbd$95.$$arity = -2);
    
    Opal.def(self, '$section', $Converter_section$98 = function $$section(node, opts) {
      var $$99, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$99 = function(){var self = $$99.$$s || this, $a, $b, $$100, $$101, $$103, $$105, _buf = nil, titleless = nil, title = nil, hide_title = nil, vertical_slides = nil, data_background_image = nil, data_background_size = nil, data_background_repeat = nil, data_background_position = nil, data_background_transition = nil, section_images = nil, bg_image = nil, data_background_color = nil, parent_section_with_vertical_slides = nil, _slim_htag_filter1 = nil;
        if (self.level == null) self.level = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        titleless = (title = self.$title())['$==']("!");
        hide_title = ($truthy($a = ($truthy($b = titleless) ? $b : self['$option?']("notitle"))) ? $a : self['$option?']("conceal"));
        vertical_slides = $send(self, 'find_by', [$hash2(["context"], {"context": "section"})], ($$100 = function(section){var self = $$100.$$s || this;

        
          
          if (section == null) {
            section = nil;
          };
          return section.$level()['$=='](2);}, $$100.$$s = self, $$100.$$arity = 1, $$100));
        $b = nil, $a = Opal.to_ary($b), (data_background_image = ($a[0] == null ? nil : $a[0])), (data_background_size = ($a[1] == null ? nil : $a[1])), (data_background_repeat = ($a[2] == null ? nil : $a[2])), (data_background_position = ($a[3] == null ? nil : $a[3])), (data_background_transition = ($a[4] == null ? nil : $a[4])), $b;
        section_images = $send(self.$blocks(), 'map', [], ($$101 = function(block){var self = $$101.$$s || this, $c, $$102, ctx = nil;

        
          
          if (block == null) {
            block = nil;
          };
          if ((ctx = block.$context())['$==']("image")) {
            if ($truthy(["background", "canvas"]['$include?'](block.$attributes()['$[]'](1)))) {
              return block
            } else {
              return []
            }
          } else if (ctx['$==']("section")) {
            return []
          } else {
            return ($truthy($c = $send(block, 'find_by', [$hash2(["context"], {"context": "image"})], ($$102 = function(image){var self = $$102.$$s || this;

            
              
              if (image == null) {
                image = nil;
              };
              return ["background", "canvas"]['$include?'](image.$attributes()['$[]'](1));}, $$102.$$s = self, $$102.$$arity = 1, $$102))) ? $c : [])
          };}, $$101.$$s = self, $$101.$$arity = 1, $$101));
        if ($truthy((bg_image = section_images.$flatten().$first()))) {
          
          data_background_image = self.$image_uri(bg_image.$attr("target"));
          data_background_size = bg_image.$attr("size");
          data_background_repeat = bg_image.$attr("repeat");
          data_background_transition = bg_image.$attr("transition");
          data_background_position = bg_image.$attr("position");};
        if ($truthy(self['$attr?']("background-image"))) {
          data_background_image = self.$image_uri(self.$attr("background-image"))};
        if ($truthy(self['$attr?']("background-color"))) {
          data_background_color = self.$attr("background-color")};
        parent_section_with_vertical_slides = (($a = self.level['$=='](1)) ? vertical_slides['$empty?']()['$!']() : self.level['$=='](1));
        $send(self, 'content_for', ["section"], ($$103 = function(){var self = $$103.$$s || this, $c, $$104, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _blocks = nil, _content = nil;

        
          _buf['$<<']("<section");
          _slim_codeattributes1 = (function() {if ($truthy(titleless)) {
            return nil
          } else {
            return self.$id()
          }; return nil; })();
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _temple_html_attributeremover1 = [];
          _slim_codeattributes2 = self.$roles();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
            
            _slim_codeattributes2 = _slim_codeattributes2.$flatten();
            $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes3 = self.$attr("transition");
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" data-transition")
            } else {
              
              _buf['$<<'](" data-transition=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes4 = self.$attr("transition-speed");
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" data-transition-speed")
            } else {
              
              _buf['$<<'](" data-transition-speed=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes5 = data_background_color;
          if ($truthy(_slim_codeattributes5)) {
            if (_slim_codeattributes5['$=='](true)) {
              _buf['$<<'](" data-background-color")
            } else {
              
              _buf['$<<'](" data-background-color=\"");
              _buf['$<<'](_slim_codeattributes5);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes6 = data_background_image;
          if ($truthy(_slim_codeattributes6)) {
            if (_slim_codeattributes6['$=='](true)) {
              _buf['$<<'](" data-background-image")
            } else {
              
              _buf['$<<'](" data-background-image=\"");
              _buf['$<<'](_slim_codeattributes6);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes7 = ($truthy($c = data_background_size) ? $c : self.$attr("background-size"));
          if ($truthy(_slim_codeattributes7)) {
            if (_slim_codeattributes7['$=='](true)) {
              _buf['$<<'](" data-background-size")
            } else {
              
              _buf['$<<'](" data-background-size=\"");
              _buf['$<<'](_slim_codeattributes7);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes8 = ($truthy($c = data_background_repeat) ? $c : self.$attr("background-repeat"));
          if ($truthy(_slim_codeattributes8)) {
            if (_slim_codeattributes8['$=='](true)) {
              _buf['$<<'](" data-background-repeat")
            } else {
              
              _buf['$<<'](" data-background-repeat=\"");
              _buf['$<<'](_slim_codeattributes8);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes9 = ($truthy($c = data_background_transition) ? $c : self.$attr("background-transition"));
          if ($truthy(_slim_codeattributes9)) {
            if (_slim_codeattributes9['$=='](true)) {
              _buf['$<<'](" data-background-transition")
            } else {
              
              _buf['$<<'](" data-background-transition=\"");
              _buf['$<<'](_slim_codeattributes9);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes10 = ($truthy($c = data_background_position) ? $c : self.$attr("background-position"));
          if ($truthy(_slim_codeattributes10)) {
            if (_slim_codeattributes10['$=='](true)) {
              _buf['$<<'](" data-background-position")
            } else {
              
              _buf['$<<'](" data-background-position=\"");
              _buf['$<<'](_slim_codeattributes10);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes11 = self.$attr("background-iframe");
          if ($truthy(_slim_codeattributes11)) {
            if (_slim_codeattributes11['$=='](true)) {
              _buf['$<<'](" data-background-iframe")
            } else {
              
              _buf['$<<'](" data-background-iframe=\"");
              _buf['$<<'](_slim_codeattributes11);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes12 = self.$attr("background-video");
          if ($truthy(_slim_codeattributes12)) {
            if (_slim_codeattributes12['$=='](true)) {
              _buf['$<<'](" data-background-video")
            } else {
              
              _buf['$<<'](" data-background-video=\"");
              _buf['$<<'](_slim_codeattributes12);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes13 = ($truthy($c = self['$attr?']("background-video-loop")) ? $c : self['$option?']("loop"));
          if ($truthy(_slim_codeattributes13)) {
            if (_slim_codeattributes13['$=='](true)) {
              _buf['$<<'](" data-background-video-loop")
            } else {
              
              _buf['$<<'](" data-background-video-loop=\"");
              _buf['$<<'](_slim_codeattributes13);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes14 = ($truthy($c = self['$attr?']("background-video-muted")) ? $c : self['$option?']("muted"));
          if ($truthy(_slim_codeattributes14)) {
            if (_slim_codeattributes14['$=='](true)) {
              _buf['$<<'](" data-background-video-muted")
            } else {
              
              _buf['$<<'](" data-background-video-muted=\"");
              _buf['$<<'](_slim_codeattributes14);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes15 = self.$attr("background-opacity");
          if ($truthy(_slim_codeattributes15)) {
            if (_slim_codeattributes15['$=='](true)) {
              _buf['$<<'](" data-background-opacity")
            } else {
              
              _buf['$<<'](" data-background-opacity=\"");
              _buf['$<<'](_slim_codeattributes15);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes16 = self.$attr("state");
          if ($truthy(_slim_codeattributes16)) {
            if (_slim_codeattributes16['$=='](true)) {
              _buf['$<<'](" data-state")
            } else {
              
              _buf['$<<'](" data-state=\"");
              _buf['$<<'](_slim_codeattributes16);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy(hide_title)) {
          } else {
            
            _buf['$<<']("<h2>");
            _buf['$<<'](self.$section_title());
            _buf['$<<']("</h2>");
          };
          if ($truthy(parent_section_with_vertical_slides)) {
            if ($truthy((_blocks = $rb_minus(self.$blocks(), vertical_slides))['$empty?']())) {
            } else {
              
              _buf['$<<']("<div class=\"slide-content\">");
              $send(_blocks, 'each', [], ($$104 = function(block){var self = $$104.$$s || this;

              
                
                if (block == null) {
                  block = nil;
                };
                return _buf['$<<'](block.$convert());}, $$104.$$s = self, $$104.$$arity = 1, $$104));
              _buf['$<<']("</div>");
            }
          } else if ($truthy((_content = self.$content().$chomp())['$empty?']())) {
          } else {
            
            _buf['$<<']("<div class=\"slide-content\">");
            _buf['$<<'](_content);
            _buf['$<<']("</div>");
          };
          return _buf['$<<']("</section>");}, $$103.$$s = self, $$103.$$arity = 0, $$103));
        if ($truthy(parent_section_with_vertical_slides)) {
          
          _buf['$<<']("<section>");
          self.$yield_content("section");
          $send(vertical_slides, 'each', [], ($$105 = function(subsection){var self = $$105.$$s || this;

          
            
            if (subsection == null) {
              subsection = nil;
            };
            return _buf['$<<'](subsection.$convert());}, $$105.$$s = self, $$105.$$arity = 1, $$105));
          _buf['$<<']("</section>");
        } else if ($truthy($rb_ge(self.level, 3))) {
          
          _slim_htag_filter1 = self.level.$to_s();
          _buf['$<<']("<h");
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">");
          _buf['$<<'](title);
          _buf['$<<']("</h");
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">");
          _buf['$<<'](self.$content().$chomp());
        } else {
          self.$yield_content("section")
        };
        return (_buf = _buf.$join(""));}, $$99.$$s = self, $$99.$$arity = 0, $$99));
    }, $Converter_section$98.$$arity = -2);
    
    Opal.def(self, '$example', $Converter_example$106 = function $$example(node, opts) {
      var $$107, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$107 = function(){var self = $$107.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "exampleblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<div class=\"content\">");
        _buf['$<<'](self.$content());
        _buf['$<<']("</div></div>");
        return (_buf = _buf.$join(""));}, $$107.$$s = self, $$107.$$arity = 0, $$107));
    }, $Converter_example$106.$$arity = -2);
    
    Opal.def(self, '$inline_button', $Converter_inline_button$108 = function $$inline_button(node, opts) {
      var $$109, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$109 = function(){var self = $$109.$$s || this, _buf = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<b class=\"button\">");
        _buf['$<<'](self.text);
        _buf['$<<']("</b>");
        return (_buf = _buf.$join(""));}, $$109.$$s = self, $$109.$$arity = 0, $$109));
    }, $Converter_inline_button$108.$$arity = -2);
    
    Opal.def(self, '$inline_menu', $Converter_inline_menu$110 = function $$inline_menu(node, opts) {
      var $$111, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$111 = function(){var self = $$111.$$s || this, $$112, _buf = nil, menu = nil, menuitem = nil, submenus = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        menu = self.$attr("menu");
        menuitem = self.$attr("menuitem");
        if ($truthy((submenus = self.$attr("submenus"))['$empty?']()['$!']())) {
          
          _buf['$<<']("<span class=\"menuseq\"><span class=\"menu\">");
          _buf['$<<'](menu);
          _buf['$<<']("</span>&#160;&#9656;&#32;");
          _buf['$<<']($send(submenus, 'map', [], ($$112 = function(submenu){var self = $$112.$$s || this;

          
            
            if (submenu == null) {
              submenu = nil;
            };
            return "" + "<span class=\"submenu\">" + (submenu) + "</span>&#160;&#9656;&#32;";}, $$112.$$s = self, $$112.$$arity = 1, $$112)).$join());
          _buf['$<<']("<span class=\"menuitem\">");
          _buf['$<<'](menuitem);
          _buf['$<<']("</span></span>");
        } else if ($truthy(menuitem['$nil?']()['$!']())) {
          
          _buf['$<<']("<span class=\"menuseq\"><span class=\"menu\">");
          _buf['$<<'](menu);
          _buf['$<<']("</span>&#160;&#9656;&#32;<span class=\"menuitem\">");
          _buf['$<<'](menuitem);
          _buf['$<<']("</span></span>");
        } else {
          
          _buf['$<<']("<span class=\"menu\">");
          _buf['$<<'](menu);
          _buf['$<<']("</span>");
        };
        return (_buf = _buf.$join(""));}, $$111.$$s = self, $$111.$$arity = 0, $$111));
    }, $Converter_inline_menu$110.$$arity = -2);
    
    Opal.def(self, '$audio', $Converter_audio$113 = function $$audio(node, opts) {
      var $$114, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$114 = function(){var self = $$114.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "audioblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<div class=\"content\"><audio");
        _slim_codeattributes3 = self.$media_uri(self.$attr("target"));
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" src")
          } else {
            
            _buf['$<<'](" src=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes4 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" autoplay")
          } else {
            
            _buf['$<<'](" autoplay=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes5 = self['$option?']("nocontrols")['$!']();
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" controls")
          } else {
            
            _buf['$<<'](" controls=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes6 = self['$option?']("loop");
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" loop")
          } else {
            
            _buf['$<<'](" loop=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">Your browser does not support the audio tag.</audio></div></div>");
        return (_buf = _buf.$join(""));}, $$114.$$s = self, $$114.$$arity = 0, $$114));
    }, $Converter_audio$113.$$arity = -2);
    
    Opal.def(self, '$stem', $Converter_stem$115 = function $$stem(node, opts) {
      var $$116, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$116 = function(){var self = $$116.$$s || this, $a, $b, _buf = nil, open = nil, close = nil, equation = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.style == null) self.style = nil;
        if (self.subs == null) self.subs = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $b = $$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]'](self.style.$to_sym()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        equation = self.$content().$strip();
        if ($truthy(($truthy($a = ($truthy($b = self.subs['$nil?']()) ? $b : self.subs['$empty?']())) ? self['$attr?']("subs")['$!']() : $a))) {
          equation = self.$sub_specialcharacters(equation)};
        if ($truthy(($truthy($a = equation['$start_with?'](open)) ? equation['$end_with?'](close) : $a))) {
        } else {
          equation = "" + (open) + (equation) + (close)
        };
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "stemblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<div class=\"content\">");
        _buf['$<<'](equation);
        _buf['$<<']("</div></div>");
        return (_buf = _buf.$join(""));}, $$116.$$s = self, $$116.$$arity = 0, $$116));
    }, $Converter_stem$115.$$arity = -2);
    
    Opal.def(self, '$olist', $Converter_olist$117 = function $$olist(node, opts) {
      var $$118, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$118 = function(){var self = $$118.$$s || this, $$119, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "olist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<ol");
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = self.style;
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
        };
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _slim_codeattributes4 = self.$attr("start");
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" start")
          } else {
            
            _buf['$<<'](" start=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes5 = self.$list_marker_keyword();
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" type")
          } else {
            
            _buf['$<<'](" type=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        $send(self.$items(), 'each', [], ($$119 = function(item){var self = $$119.$$s || this, $a, _temple_html_attributeremover3 = nil, _slim_codeattributes6 = nil;

        
          
          if (item == null) {
            item = nil;
          };
          _buf['$<<']("<li");
          _temple_html_attributeremover3 = [];
          _slim_codeattributes6 = (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$has_role?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes6))) {
            
            _slim_codeattributes6 = _slim_codeattributes6.$flatten();
            $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes6.$join(" "));
          } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes6)
          };
          _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"");};
          _buf['$<<']("><p>");
          _buf['$<<'](item.$text());
          _buf['$<<']("</p>");
          if ($truthy(item['$blocks?']())) {
            _buf['$<<'](item.$content())};
          return _buf['$<<']("</li>");}, $$119.$$s = self, $$119.$$arity = 1, $$119));
        _buf['$<<']("</ol></div>");
        return (_buf = _buf.$join(""));}, $$118.$$s = self, $$118.$$arity = 0, $$118));
    }, $Converter_olist$117.$$arity = -2);
    
    Opal.def(self, '$inline_anchor', $Converter_inline_anchor$120 = function $$inline_anchor(node, opts) {
      var $$121, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$121 = function(){var self = $$121.$$s || this, $a, _buf = nil, $case = nil, refid = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil;
        if (self.type == null) self.type = nil;
        if (self.target == null) self.target = nil;
        if (self.text == null) self.text = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $case = self.type;
        if ("xref"['$===']($case)) {
        refid = ($truthy($a = self.$attr("refid")) ? $a : self.target);
        _buf['$<<']("<a");
        _slim_codeattributes1 = self.target;
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" href")
          } else {
            
            _buf['$<<'](" href=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        _buf['$<<'](($truthy($a = self.text) ? $a : self.document.$references()['$[]']("ids").$fetch(refid, "" + "[" + (refid) + "]")).$tr_s("\n", " "));
        _buf['$<<']("</a>");}
        else if ("ref"['$===']($case)) {
        _buf['$<<']("<a");
        _slim_codeattributes2 = self.target;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("></a>");}
        else if ("bibref"['$===']($case)) {
        _buf['$<<']("<a");
        _slim_codeattributes3 = self.target;
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("></a>[");
        _buf['$<<'](self.target);
        _buf['$<<']("]");}
        else {
        _buf['$<<']("<a");
        _slim_codeattributes4 = self.target;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" href")
          } else {
            
            _buf['$<<'](" href=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes5 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes5))) {
          
          _slim_codeattributes5 = _slim_codeattributes5.$flatten();
          $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes5.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes5)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes6 = self.$attr("window");
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" target")
          } else {
            
            _buf['$<<'](" target=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes7 = self.$bool_data_attr("preview");
        if ($truthy(_slim_codeattributes7)) {
          if (_slim_codeattributes7['$=='](true)) {
            _buf['$<<'](" data-preview-link")
          } else {
            
            _buf['$<<'](" data-preview-link=\"");
            _buf['$<<'](_slim_codeattributes7);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</a>");};
        return (_buf = _buf.$join(""));}, $$121.$$s = self, $$121.$$arity = 0, $$121));
    }, $Converter_inline_anchor$120.$$arity = -2);
    
    Opal.def(self, '$admonition', $Converter_admonition$122 = function $$admonition(node, opts) {
      var $$123, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$123 = function(){var self = $$123.$$s || this, $a, $b, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, icon_mapping = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;
        if (self.caption == null) self.caption = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _buf['$<<']("<div");
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "admonitionblock"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes1 = [self.$attr("name"), self.$role()];
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
          };
          
          $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes2 = self.id;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("><table><tr><td class=\"icon\">");
          if ($truthy(self.document['$attr?']("icons", "font"))) {
            
            icon_mapping = $$($nesting, 'Hash')['$[]']("caution", "fire", "important", "exclamation-circle", "note", "info-circle", "tip", "lightbulb-o", "warning", "warning");
            _buf['$<<']("<i");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes3 = "" + "fa fa-" + (icon_mapping['$[]'](self.$attr("name")));
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
              
              _slim_codeattributes3 = _slim_codeattributes3.$flatten();
              $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover2);
              _buf['$<<']("\"");};
            _slim_codeattributes4 = self.$attr(($truthy($a = "textlabel") ? $a : self.caption));
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></i>");
          } else if ($truthy(self.document['$attr?']("icons"))) {
            
            _buf['$<<']("<img");
            _slim_codeattributes5 = self.$icon_uri(self.$attr("name"));
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes6 = self.caption;
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          } else {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](($truthy($a = self.$attr("textlabel")) ? $a : self.caption));
            _buf['$<<']("</div>");
          };
          _buf['$<<']("</td><td class=\"content\">");
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$title());
            _buf['$<<']("</div>");};
          _buf['$<<'](self.$content());
          _buf['$<<']("</td></tr></table></div>");
        };
        return (_buf = _buf.$join(""));}, $$123.$$s = self, $$123.$$arity = 0, $$123));
    }, $Converter_admonition$122.$$arity = -2);
    
    Opal.def(self, '$inline_quoted', $Converter_inline_quoted$124 = function $$inline_quoted(node, opts) {
      var $$125, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$125 = function(){var self = $$125.$$s || this, $a, $b, _buf = nil, _slim_codeattributes1 = nil, $case = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover4 = nil, _slim_codeattributes5 = nil, _temple_html_attributeremover5 = nil, _slim_codeattributes6 = nil, open = nil, close = nil;
        if (self.id == null) self.id = nil;
        if (self.type == null) self.type = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.id['$nil?']())) {
        } else {
          
          _buf['$<<']("<a");
          _slim_codeattributes1 = self.id;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("></a>");
        };
        $case = self.type;
        if ("emphasis"['$===']($case)) {
        _buf['$<<']("<em");
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</em>");}
        else if ("strong"['$===']($case)) {
        _buf['$<<']("<strong");
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
        };
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</strong>");}
        else if ("monospaced"['$===']($case)) {
        _buf['$<<']("<code");
        _temple_html_attributeremover3 = [];
        _slim_codeattributes4 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes4))) {
          
          _slim_codeattributes4 = _slim_codeattributes4.$flatten();
          $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$join(" "));
        } else {
          _temple_html_attributeremover3['$<<'](_slim_codeattributes4)
        };
        _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
        if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover3);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</code>");}
        else if ("superscript"['$===']($case)) {
        _buf['$<<']("<sup");
        _temple_html_attributeremover4 = [];
        _slim_codeattributes5 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes5))) {
          
          _slim_codeattributes5 = _slim_codeattributes5.$flatten();
          $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover4['$<<'](_slim_codeattributes5.$join(" "));
        } else {
          _temple_html_attributeremover4['$<<'](_slim_codeattributes5)
        };
        _temple_html_attributeremover4 = _temple_html_attributeremover4.$join("");
        if ($truthy(_temple_html_attributeremover4['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover4);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</sup>");}
        else if ("subscript"['$===']($case)) {
        _buf['$<<']("<sub");
        _temple_html_attributeremover5 = [];
        _slim_codeattributes6 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes6))) {
          
          _slim_codeattributes6 = _slim_codeattributes6.$flatten();
          $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover5['$<<'](_slim_codeattributes6.$join(" "));
        } else {
          _temple_html_attributeremover5['$<<'](_slim_codeattributes6)
        };
        _temple_html_attributeremover5 = _temple_html_attributeremover5.$join("");
        if ($truthy(_temple_html_attributeremover5['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover5);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</sub>");}
        else if ("double"['$===']($case)) {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">&#8220;" + (self.text) + "&#8221;</span>"
        } else {
          return "" + "&#8220;" + (self.text) + "&#8221;"
        }; return nil; })())}
        else if ("single"['$===']($case)) {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">&#8216;" + (self.text) + "&#8217;</span>"
        } else {
          return "" + "&#8216;" + (self.text) + "&#8217;"
        }; return nil; })())}
        else if ("asciimath"['$===']($case) || "latexmath"['$===']($case)) {
        $b = $$$($$($nesting, 'Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]'](self.type), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        _buf['$<<'](open);
        _buf['$<<'](self.text);
        _buf['$<<'](close);}
        else {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">" + (self.text) + "</span>"
        } else {
          return self.text
        }; return nil; })())};
        return (_buf = _buf.$join(""));}, $$125.$$s = self, $$125.$$arity = 0, $$125));
    }, $Converter_inline_quoted$124.$$arity = -2);
    
    Opal.def(self, '$ulist', $Converter_ulist$126 = function $$ulist(node, opts) {
      var $$127, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$127 = function(){var self = $$127.$$s || this, $a, $$128, _buf = nil, checklist = nil, marker_checked = nil, marker_unchecked = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy((checklist = (function() {if ($truthy(self['$option?']("checklist"))) {
          return "checklist"
        } else {
          return nil
        }; return nil; })()))) {
          if ($truthy(self['$option?']("interactive"))) {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\">";
          } else if ($truthy(self.document['$attr?']("icons", "font"))) {
            
            marker_checked = "<i class=\"icon-check\"></i>";
            marker_unchecked = "<i class=\"icon-check-empty\"></i>";
          } else {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked disabled>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\" disabled>";
          }};
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "ulist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [checklist, self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<ul");
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = ($truthy($a = checklist) ? $a : self.style);
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
        };
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        $send(self.$items(), 'each', [], ($$128 = function(item){var self = $$128.$$s || this, $b, _temple_html_attributeremover3 = nil, _slim_codeattributes4 = nil;

        
          
          if (item == null) {
            item = nil;
          };
          _buf['$<<']("<li");
          _temple_html_attributeremover3 = [];
          _slim_codeattributes4 = (function() {if ($truthy(($truthy($b = self['$option?']("step")) ? $b : self['$has_role?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes4))) {
            
            _slim_codeattributes4 = _slim_codeattributes4.$flatten();
            $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$join(" "));
          } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes4)
          };
          _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"");};
          _buf['$<<']("><p>");
          if ($truthy(($truthy($b = checklist) ? item['$attr?']("checkbox") : $b))) {
            _buf['$<<']("" + ((function() {if ($truthy(item['$attr?']("checked"))) {
              return marker_checked
            } else {
              return marker_unchecked
            }; return nil; })()) + (item.$text()))
          } else {
            _buf['$<<'](item.$text())
          };
          _buf['$<<']("</p>");
          if ($truthy(item['$blocks?']())) {
            _buf['$<<'](item.$content())};
          return _buf['$<<']("</li>");}, $$128.$$s = self, $$128.$$arity = 1, $$128));
        _buf['$<<']("</ul></div>");
        return (_buf = _buf.$join(""));}, $$127.$$s = self, $$127.$$arity = 0, $$127));
    }, $Converter_ulist$126.$$arity = -2);
    
    Opal.def(self, '$ruler', $Converter_ruler$129 = function $$ruler(node, opts) {
      var $$130, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$130 = function(){var self = $$130.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>");
        return (_buf = _buf.$join(""));}, $$130.$$s = self, $$130.$$arity = 0, $$130));
    }, $Converter_ruler$129.$$arity = -2);
    
    Opal.def(self, '$colist', $Converter_colist$131 = function $$colist(node, opts) {
      var $$132, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$132 = function(){var self = $$132.$$s || this, $$133, $$134, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, font_icons = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "colist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        if ($truthy(self.document['$attr?']("icons"))) {
          
          font_icons = self.document['$attr?']("icons", "font");
          _buf['$<<']("<table>");
          $send(self.$items(), 'each_with_index', [], ($$133 = function(item, i){var self = $$133.$$s || this, num = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil;

          
            
            if (item == null) {
              item = nil;
            };
            
            if (i == null) {
              i = nil;
            };
            num = $rb_plus(i, 1);
            _buf['$<<']("<tr><td>");
            if ($truthy(font_icons)) {
              
              _buf['$<<']("<i class=\"conum\"");
              _slim_codeattributes3 = num;
              if ($truthy(_slim_codeattributes3)) {
                if (_slim_codeattributes3['$=='](true)) {
                  _buf['$<<'](" data-value")
                } else {
                  
                  _buf['$<<'](" data-value=\"");
                  _buf['$<<'](_slim_codeattributes3);
                  _buf['$<<']("\"");
                }};
              _buf['$<<']("></i><b>");
              _buf['$<<'](num);
              _buf['$<<']("</b>");
            } else {
              
              _buf['$<<']("<img");
              _slim_codeattributes4 = self.$icon_uri("" + "callouts/" + (num));
              if ($truthy(_slim_codeattributes4)) {
                if (_slim_codeattributes4['$=='](true)) {
                  _buf['$<<'](" src")
                } else {
                  
                  _buf['$<<'](" src=\"");
                  _buf['$<<'](_slim_codeattributes4);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes5 = num;
              if ($truthy(_slim_codeattributes5)) {
                if (_slim_codeattributes5['$=='](true)) {
                  _buf['$<<'](" alt")
                } else {
                  
                  _buf['$<<'](" alt=\"");
                  _buf['$<<'](_slim_codeattributes5);
                  _buf['$<<']("\"");
                }};
              _buf['$<<'](">");
            };
            _buf['$<<']("</td><td>");
            _buf['$<<'](item.$text());
            return _buf['$<<']("</td></tr>");}, $$133.$$s = self, $$133.$$arity = 2, $$133));
          _buf['$<<']("</table>");
        } else {
          
          _buf['$<<']("<ol>");
          $send(self.$items(), 'each', [], ($$134 = function(item){var self = $$134.$$s || this;

          
            
            if (item == null) {
              item = nil;
            };
            _buf['$<<']("<li><p>");
            _buf['$<<'](item.$text());
            return _buf['$<<']("</p></li>");}, $$134.$$s = self, $$134.$$arity = 1, $$134));
          _buf['$<<']("</ol>");
        };
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, $$132.$$s = self, $$132.$$arity = 0, $$132));
    }, $Converter_colist$131.$$arity = -2);
    return (Opal.def(self, '$set_local_variables', $Converter_set_local_variables$135 = function $$set_local_variables(binding, vars) {
      var $$136, self = this;

      return $send(vars, 'each', [], ($$136 = function(key, val){var self = $$136.$$s || this;

      
        
        if (key == null) {
          key = nil;
        };
        
        if (val == null) {
          val = nil;
        };
        return binding.$local_variable_set(key.$to_sym(), val);}, $$136.$$s = self, $$136.$$arity = 2, $$136))
    }, $Converter_set_local_variables$135.$$arity = 2), nil) && 'set_local_variables';
  })($$$($$($nesting, 'Asciidoctor'), 'Revealjs'), $$$($$$($$$('::', 'Asciidoctor'), 'Converter'), 'Base'), $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor-revealjs/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Revealjs');

      var $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'VERSION', "4.0.1")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor-revealjs/highlightjs"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$register_for', '$join', '$collect', '$split', '$[]', '$attributes', '$resolve_lines_to_highlight', '$content', '$merge', '$proc', '$[]=', '$-', '$key?', '$_convert_highlight_to_revealjs', '$==', '$attr', '$attr?', '$map', '$lstrip']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Revealjs');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'SyntaxHighlighter');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'HighlightJsAdapter');

          var $nesting = [self].concat($parent_nesting), $HighlightJsAdapter_initialize$1, $HighlightJsAdapter__convert_highlight_to_revealjs$2, $HighlightJsAdapter_format$4, $HighlightJsAdapter_docinfo$ques$6, $HighlightJsAdapter_docinfo$7;

          
          self.$register_for("highlightjs", "highlight.js");
          Opal.const_set($nesting[0], 'HIGHLIGHT_JS_VERSION', "9.18.1");
          
          Opal.def(self, '$initialize', $HighlightJsAdapter_initialize$1 = function $$initialize($a) {
            var $post_args, args, $iter = $HighlightJsAdapter_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $HighlightJsAdapter_initialize$1.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $send(self, Opal.find_super_dispatcher(self, 'initialize', $HighlightJsAdapter_initialize$1, false), $zuper, $iter);
            return (self.name = (self.pre_class = "highlightjs"));
          }, $HighlightJsAdapter_initialize$1.$$arity = -1);
          
          Opal.def(self, '$_convert_highlight_to_revealjs', $HighlightJsAdapter__convert_highlight_to_revealjs$2 = function $$_convert_highlight_to_revealjs(node) {
            var $$3, self = this;

            return $send(node.$attributes()['$[]']("highlight").$split("|"), 'collect', [], ($$3 = function(linenums){var self = $$3.$$s || this;

            
              
              if (linenums == null) {
                linenums = nil;
              };
              return node.$resolve_lines_to_highlight(node.$content(), linenums).$join(",");}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$join("|")
          }, $HighlightJsAdapter__convert_highlight_to_revealjs$2.$$arity = 1);
          
          Opal.def(self, '$format', $HighlightJsAdapter_format$4 = function $$format(node, lang, opts) {
            var $$5, $iter = $HighlightJsAdapter_format$4.$$p, $yield = $iter || nil, self = this;

            if ($iter) $HighlightJsAdapter_format$4.$$p = null;
            return $send(self, Opal.find_super_dispatcher(self, 'format', $HighlightJsAdapter_format$4, false), [node, lang, opts.$merge($hash2(["transform"], {"transform": $send(self, 'proc', [], ($$5 = function(_, code){var self = $$5.$$s || this, $a, $writer = nil;

            
              
              if (_ == null) {
                _ = nil;
              };
              
              if (code == null) {
                code = nil;
              };
              
              $writer = ["class", "" + "language-" + (($truthy($a = lang) ? $a : "none")) + " hljs"];
              $send(code, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = ["data-noescape", true];
              $send(code, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(node.$attributes()['$key?']("highlight"))) {
                
                $writer = ["data-line-numbers", self.$_convert_highlight_to_revealjs(node)];
                $send(code, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(node.$attributes()['$key?']("linenums"))) {
                
                $writer = ["data-line-numbers", ""];
                $send(code, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else {
                return nil
              };}, $$5.$$s = self, $$5.$$arity = 2, $$5))}))], null)
          }, $HighlightJsAdapter_format$4.$$arity = 3);
          
          Opal.def(self, '$docinfo?', $HighlightJsAdapter_docinfo$ques$6 = function(location) {
            var self = this;

            return location['$==']("footer")
          }, $HighlightJsAdapter_docinfo$ques$6.$$arity = 1);
          
          Opal.def(self, '$docinfo', $HighlightJsAdapter_docinfo$7 = function $$docinfo(location, doc, opts) {
            var $a, $$8, self = this, revealjsdir = nil, theme_href = nil, base_url = nil;

            
            if ($truthy((($a = $$($nesting, 'RUBY_ENGINE')['$==']("opal")) ? $$($nesting, 'JAVASCRIPT_PLATFORM')['$==']("node") : $$($nesting, 'RUBY_ENGINE')['$==']("opal")))) {
              revealjsdir = doc.$attr("revealjsdir", "node_modules/reveal.js")
            } else {
              revealjsdir = doc.$attr("revealjsdir", "reveal.js")
            };
            if ($truthy(doc['$attr?']("highlightjs-theme"))) {
              theme_href = doc.$attr("highlightjs-theme")
            } else {
              theme_href = "" + (revealjsdir) + "/lib/css/monokai.css"
            };
            base_url = doc.$attr("highlightjsdir", "" + (opts['$[]']("cdn_base_url")) + "/highlight.js/" + ($$($nesting, 'HIGHLIGHT_JS_VERSION')));
            return "" + "<link rel=\"stylesheet\" href=\"" + (theme_href) + "\"" + (opts['$[]']("self_closing_tag_slash")) + ">\n" + "<script src=\"" + (base_url) + "/highlight.min.js\"></script>\n" + ((function() {if ($truthy(doc['$attr?']("highlightjs-languages"))) {
              return $send(doc.$attr("highlightjs-languages").$split(","), 'map', [], ($$8 = function(lang){var self = $$8.$$s || this;

              
                
                if (lang == null) {
                  lang = nil;
                };
                return "" + "<script src=\"" + (base_url) + "/languages/" + (lang.$lstrip()) + ".min.js\"></script>\n";}, $$8.$$s = self, $$8.$$arity = 1, $$8)).$join()
            } else {
              return ""
            }; return nil; })()) + "\n" + "<script>\n" + ($$($nesting, 'HIGHLIGHT_PLUGIN_SOURCE')) + "\n" + "hljs.initHighlightingOnLoad();\n" + "</script>";
          }, $HighlightJsAdapter_docinfo$7.$$arity = 3);
          return Opal.const_set($nesting[0], 'HIGHLIGHT_PLUGIN_SOURCE', "" + "\n" + "/* highlightjs-line-numbers.js 2.6.0 | (C) 2018 Yauheni Pakala | MIT License | github.com/wcoder/highlightjs-line-numbers.js */\n" + "/* Edited by Hakim for reveal.js; removed async timeout */\n" + "!function(n,e){\"use strict\";function t(){var n=e.createElement(\"style\");n.type=\"text/css\",n.innerHTML=g(\".{0}{border-collapse:collapse}.{0} td{padding:0}.{1}:before{content:attr({2})}\",[v,L,b]),e.getElementsByTagName(\"head\")[0].appendChild(n)}function r(t){\"interactive\"===e.readyState||\"complete\"===e.readyState?i(t):n.addEventListener(\"DOMContentLoaded\",function(){i(t)})}function i(t){try{var r=e.querySelectorAll(\"code.hljs,code.nohighlight\");for(var i in r)r.hasOwnProperty(i)&&l(r[i],t)}catch(o){n.console.error(\"LineNumbers error: \",o)}}function l(n,e){\"object\"==typeof n&&f(function(){n.innerHTML=s(n,e)})}function o(n,e){if(\"string\"==typeof n){var t=document.createElement(\"code\");return t.innerHTML=n,s(t,e)}}function s(n,e){e=e||{singleLine:!1};var t=e.singleLine?0:1;return c(n),a(n.innerHTML,t)}function a(n,e){var t=u(n);if(\"\"===t[t.length-1].trim()&&t.pop(),t.length>e){for(var r=\"\",i=0,l=t.length;i<l;i++)r+=g('<tr><td class=\"{0}\"><div class=\"{1} {2}\" {3}=\"{5}\"></div></td><td class=\"{4}\"><div class=\"{1}\">{6}</div></td></tr>',[j,m,L,b,p,i+1,t[i].length>0?t[i]:\" \"]);return g('<table class=\"{0}\">{1}</table>',[v,r])}return n}function c(n){var e=n.childNodes;for(var t in e)if(e.hasOwnProperty(t)){var r=e[t];h(r.textContent)>0&&(r.childNodes.length>0?c(r):d(r.parentNode))}}function d(n){var e=n.className;if(/hljs-/.test(e)){for(var t=u(n.innerHTML),r=0,i=\"\";r<t.length;r++){var l=t[r].length>0?t[r]:\" \";i+=g('<span class=\"{0}\">{1}</span>\\n',[e,l])}n.innerHTML=i.trim()}}function u(n){return 0===n.length?[]:n.split(y)}function h(n){return(n.trim().match(y)||[]).length}function f(e){e()}function g(n,e){return n.replace(/{(\\d+)}/g,function(n,t){return e[t]?e[t]:n})}var v=\"hljs-ln\",m=\"hljs-ln-line\",p=\"hljs-ln-code\",j=\"hljs-ln-numbers\",L=\"hljs-ln-n\",b=\"data-line-number\",y=/\\r\\n|\\r|\\n/g;n.hljs?(n.hljs.initLineNumbersOnLoad=r,n.hljs.lineNumbersBlock=l,n.hljs.lineNumbersValue=o,t()):n.console.error(\"highlight.js not detected!\")}(window,document);\n" + "\n" + "/**\n" + " * This reveal.js plugin is wrapper around the highlight.js\n" + " * syntax highlighting library.\n" + " */\n" + "(function( root, factory ) {\n" + "  if (typeof define === 'function' && define.amd) {\n" + "    root.RevealHighlight = factory();\n" + "  } else if( typeof exports === 'object' ) {\n" + "    module.exports = factory();\n" + "  } else {\n" + "    // Browser globals (root is window)\n" + "    root.RevealHighlight = factory();\n" + "  }\n" + "}( this, function() {\n" + "\n" + "  // Function to perform a better \"data-trim\" on code snippets\n" + "  // Will slice an indentation amount on each line of the snippet (amount based on the line having the lowest indentation length)\n" + "  function betterTrim(snippetEl) {\n" + "    // Helper functions\n" + "    function trimLeft(val) {\n" + "      // Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\n" + "      return val.replace(/^[\\s\\uFEFF\\xA0]+/g, '');\n" + "    }\n" + "    function trimLineBreaks(input) {\n" + "      var lines = input.split('\\n');\n" + "\n" + "      // Trim line-breaks from the beginning\n" + "      for (var i = 0; i < lines.length; i++) {\n" + "        if (lines[i].trim() === '') {\n" + "          lines.splice(i--, 1);\n" + "        } else break;\n" + "      }\n" + "\n" + "      // Trim line-breaks from the end\n" + "      for (var i = lines.length-1; i >= 0; i--) {\n" + "        if (lines[i].trim() === '') {\n" + "          lines.splice(i, 1);\n" + "        } else break;\n" + "      }\n" + "\n" + "      return lines.join('\\n');\n" + "    }\n" + "\n" + "    // Main function for betterTrim()\n" + "    return (function(snippetEl) {\n" + "      var content = trimLineBreaks(snippetEl.innerHTML);\n" + "      var lines = content.split('\\n');\n" + "      // Calculate the minimum amount to remove on each line start of the snippet (can be 0)\n" + "      var pad = lines.reduce(function(acc, line) {\n" + "        if (line.length > 0 && trimLeft(line).length > 0 && acc > line.length - trimLeft(line).length) {\n" + "          return line.length - trimLeft(line).length;\n" + "        }\n" + "        return acc;\n" + "      }, Number.POSITIVE_INFINITY);\n" + "      // Slice each line with this amount\n" + "      return lines.map(function(line, index) {\n" + "        return line.slice(pad);\n" + "      })\n" + "        .join('\\n');\n" + "    })(snippetEl);\n" + "  }\n" + "\n" + "  var RevealHighlight = {\n" + "\n" + "    HIGHLIGHT_STEP_DELIMITER: '|',\n" + "    HIGHLIGHT_LINE_DELIMITER: ',',\n" + "    HIGHLIGHT_LINE_RANGE_DELIMITER: '-',\n" + "\n" + "    init: function() {\n" + "\n" + "      // Read the plugin config options and provide fallbacks\n" + "      var config = Reveal.getConfig().highlight || {};\n" + "      config.highlightOnLoad = typeof config.highlightOnLoad === 'boolean' ? config.highlightOnLoad : true;\n" + "      config.escapeHTML = typeof config.escapeHTML === 'boolean' ? config.escapeHTML : true;\n" + "\n" + "      [].slice.call( document.querySelectorAll( '.reveal pre code' ) ).forEach( function( block ) {\n" + "\n" + "        // Trim whitespace if the \"data-trim\" attribute is present\n" + "        if( block.hasAttribute( 'data-trim' ) && typeof block.innerHTML.trim === 'function' ) {\n" + "          block.innerHTML = betterTrim( block );\n" + "        }\n" + "\n" + "        // Escape HTML tags unless the \"data-noescape\" attrbute is present\n" + "        if( config.escapeHTML && !block.hasAttribute( 'data-noescape' )) {\n" + "          block.innerHTML = block.innerHTML.replace( /</g,\"&lt;\").replace(/>/g, '&gt;' );\n" + "        }\n" + "\n" + "        // Re-highlight when focus is lost (for contenteditable code)\n" + "        block.addEventListener( 'focusout', function( event ) {\n" + "          hljs.highlightBlock( event.currentTarget );\n" + "        }, false );\n" + "\n" + "        if( config.highlightOnLoad ) {\n" + "          RevealHighlight.highlightBlock( block );\n" + "        }\n" + "      } );\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Highlights a code block. If the <code> node has the\n" + "     * 'data-line-numbers' attribute we also generate slide\n" + "     * numbers.\n" + "     *\n" + "     * If the block contains multiple line highlight steps,\n" + "     * we clone the block and create a fragment for each step.\n" + "     */\n" + "    highlightBlock: function( block ) {\n" + "\n" + "      hljs.highlightBlock( block );\n" + "\n" + "      // Don't generate line numbers for empty code blocks\n" + "      if( block.innerHTML.trim().length === 0 ) return;\n" + "\n" + "      if( block.hasAttribute( 'data-line-numbers' ) ) {\n" + "        hljs.lineNumbersBlock( block, { singleLine: true } );\n" + "\n" + "        // If there is at least one highlight step, generate\n" + "        // fragments\n" + "        var highlightSteps = RevealHighlight.deserializeHighlightSteps( block.getAttribute( 'data-line-numbers' ) );\n" + "        if( highlightSteps.length > 1 ) {\n" + "\n" + "          // If the original code block has a fragment-index,\n" + "          // each clone should follow in an incremental sequence\n" + "          var fragmentIndex = parseInt( block.getAttribute( 'data-fragment-index' ), 10 );\n" + "          if( typeof fragmentIndex !== 'number' || isNaN( fragmentIndex ) ) {\n" + "            fragmentIndex = null;\n" + "          }\n" + "\n" + "          // Generate fragments for all steps except the original block\n" + "          highlightSteps.slice(1).forEach( function( highlight ) {\n" + "\n" + "            var fragmentBlock = block.cloneNode( true );\n" + "            fragmentBlock.setAttribute( 'data-line-numbers', RevealHighlight.serializeHighlightSteps( [ highlight ] ) );\n" + "            fragmentBlock.classList.add( 'fragment' );\n" + "            block.parentNode.appendChild( fragmentBlock );\n" + "            RevealHighlight.highlightLines( fragmentBlock );\n" + "\n" + "            if( typeof fragmentIndex === 'number' ) {\n" + "              fragmentBlock.setAttribute( 'data-fragment-index', fragmentIndex );\n" + "              fragmentIndex += 1;\n" + "            }\n" + "            else {\n" + "              fragmentBlock.removeAttribute( 'data-fragment-index' );\n" + "            }\n" + "\n" + "          } );\n" + "\n" + "          block.removeAttribute( 'data-fragment-index' )\n" + "          block.setAttribute( 'data-line-numbers', RevealHighlight.serializeHighlightSteps( [ highlightSteps[0] ] ) );\n" + "\n" + "        }\n" + "\n" + "        RevealHighlight.highlightLines( block );\n" + "\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Visually emphasize specific lines within a code block.\n" + "     * This only works on blocks with line numbering turned on.\n" + "     *\n" + "     * @param {HTMLElement} block a <code> block\n" + "     * @param {String} [linesToHighlight] The lines that should be\n" + "     * highlighted in this format:\n" + "     * \"1\" \t\t= highlights line 1\n" + "     * \"2,5\"\t= highlights lines 2 & 5\n" + "     * \"2,5-7\"\t= highlights lines 2, 5, 6 & 7\n" + "     */\n" + "    highlightLines: function( block, linesToHighlight ) {\n" + "\n" + "      var highlightSteps = RevealHighlight.deserializeHighlightSteps( linesToHighlight || block.getAttribute( 'data-line-numbers' ) );\n" + "\n" + "      if( highlightSteps.length ) {\n" + "\n" + "        highlightSteps[0].forEach( function( highlight ) {\n" + "\n" + "          var elementsToHighlight = [];\n" + "\n" + "          // Highlight a range\n" + "          if( typeof highlight.end === 'number' ) {\n" + "            elementsToHighlight = [].slice.call( block.querySelectorAll( 'table tr:nth-child(n+'+highlight.start+'):nth-child(-n+'+highlight.end+')' ) );\n" + "          }\n" + "          // Highlight a single line\n" + "          else if( typeof highlight.start === 'number' ) {\n" + "            elementsToHighlight = [].slice.call( block.querySelectorAll( 'table tr:nth-child('+highlight.start+')' ) );\n" + "          }\n" + "\n" + "          if( elementsToHighlight.length ) {\n" + "            elementsToHighlight.forEach( function( lineElement ) {\n" + "              lineElement.classList.add( 'highlight-line' );\n" + "            } );\n" + "\n" + "            block.classList.add( 'has-highlights' );\n" + "          }\n" + "\n" + "        } );\n" + "\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Parses and formats a user-defined string of line\n" + "     * numbers to highlight.\n" + "     *\n" + "     * @example\n" + "     * RevealHighlight.deserializeHighlightSteps( '1,2|3,5-10' )\n" + "     * // [\n" + "     * //   [ { start: 1 }, { start: 2 } ],\n" + "     * //   [ { start: 3 }, { start: 5, end: 10 } ]\n" + "     * // ]\n" + "     */\n" + "    deserializeHighlightSteps: function( highlightSteps ) {\n" + "\n" + "      // Remove whitespace\n" + "      highlightSteps = highlightSteps.replace( /\\s/g, '' );\n" + "\n" + "      // Divide up our line number groups\n" + "      highlightSteps = highlightSteps.split( RevealHighlight.HIGHLIGHT_STEP_DELIMITER );\n" + "\n" + "      return highlightSteps.map( function( highlights ) {\n" + "\n" + "        return highlights.split( RevealHighlight.HIGHLIGHT_LINE_DELIMITER ).map( function( highlight ) {\n" + "\n" + "          // Parse valid line numbers\n" + "          if( /^[\\d-]+$/.test( highlight ) ) {\n" + "\n" + "            highlight = highlight.split( RevealHighlight.HIGHLIGHT_LINE_RANGE_DELIMITER );\n" + "\n" + "            var lineStart = parseInt( highlight[0], 10 ),\n" + "              lineEnd = parseInt( highlight[1], 10 );\n" + "\n" + "            if( isNaN( lineEnd ) ) {\n" + "              return {\n" + "                start: lineStart\n" + "              };\n" + "            }\n" + "            else {\n" + "              return {\n" + "                start: lineStart,\n" + "                end: lineEnd\n" + "              };\n" + "            }\n" + "\n" + "          }\n" + "          // If no line numbers are provided, no code will be highlighted\n" + "          else {\n" + "\n" + "            return {};\n" + "\n" + "          }\n" + "\n" + "        } );\n" + "\n" + "      } );\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Serializes parsed line number data into a string so\n" + "     * that we can store it in the DOM.\n" + "     */\n" + "    serializeHighlightSteps: function( highlightSteps ) {\n" + "\n" + "      return highlightSteps.map( function( highlights ) {\n" + "\n" + "        return highlights.map( function( highlight ) {\n" + "\n" + "          // Line range\n" + "          if( typeof highlight.end === 'number' ) {\n" + "            return highlight.start + RevealHighlight.HIGHLIGHT_LINE_RANGE_DELIMITER + highlight.end;\n" + "          }\n" + "          // Single line\n" + "          else if( typeof highlight.start === 'number' ) {\n" + "            return highlight.start;\n" + "          }\n" + "          // All lines\n" + "          else {\n" + "            return '';\n" + "          }\n" + "\n" + "        } ).join( RevealHighlight.HIGHLIGHT_LINE_DELIMITER );\n" + "\n" + "      } ).join( RevealHighlight.HIGHLIGHT_STEP_DELIMITER );\n" + "\n" + "    }\n" + "\n" + "  }\n" + "\n" + "  Reveal.registerPlugin( 'highlight', RevealHighlight );\n" + "\n" + "  return RevealHighlight;\n" + "\n" + "}));\n" + "        ");
        })($nesting[0], $$$($$$($$($nesting, 'Asciidoctor'), 'SyntaxHighlighter'), 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("asciidoctor-revealjs/converter");
    self.$require("asciidoctor-revealjs/version");
    return self.$require("asciidoctor-revealjs/highlightjs");
  } else {
    return nil
  }
})(Opal);

  }

  var mainModule

  function resolveModule () {
    if (!mainModule) {
      checkAsciidoctor()
      initialize(Opal)
      mainModule = Opal.const_get_qualified(Opal.Asciidoctor, 'Revealjs')
    }
    return mainModule
  }

  function checkAsciidoctor () {
    if (typeof Opal.Asciidoctor === 'undefined') {
      throw new TypeError('Asciidoctor.js is not loaded')
    }
  }

  /**
   * @return {string} Version of this extension.
   */
  function getVersion () {
    return resolveModule().$$const.VERSION.toString()
  }

  /**
   * Registers the reveal.js converter.
   */
  function register () {
    return resolveModule()
  }

  var facade = {
    getVersion: getVersion,
    register: register,
  }

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = facade
  }
  return facade
})(Opal);
