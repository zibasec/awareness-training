#!/usr/bin/env bash

## where does this script live?
SOURCE="${BASH_SOURCE[0]}"
TOPLEVEL="$( dirname "${SOURCE}" )"
while [ -h "${SOURCE}" ]
do
  SOURCE="$(readlink "${SOURCE}")"
  [[ ${SOURCE} != /* ]] && SOURCE="${TOPLEVEL}/${SOURCE}"
  TOPLEVEL="$( cd -P "$( dirname "${SOURCE}"  )" && pwd )"
done
TOPLEVEL="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"

# stringent.sh copyright michael potter 2008

# stringent.sh is intended to reduce the problems associated with
# using bash by turning on bash options that make errors more
# apparent.  This will not eliminate problems and I am sure there
# is some case where some problem will be made worse.
# USE AT YOUR OWN RISK.

set -o errexit	# errexit first
set -o noclobber
set -o nounset
set -o pipefail    # if you fail on this line, get a newer version of bash.

function traperr
{
   declare -i i;
   declare -i nestlevel;
   declare Message=${1:-""}

   nestlevel=${#FUNCNAME[@]}

   if (( $nestlevel <= 2 ))
   then
      echo "ERROR: ${BASH_SOURCE[1]}:${BASH_LINENO[0]} $Message" >&2
   else
      echo "ERROR: ${FUNCNAME[1]}(${BASH_SOURCE[1]}:~${BASH_LINENO[0]}) $Message" >&2
      for (( i = 2 ; i < $nestlevel ; i++ ))
      do
         echo "      ${FUNCNAME[$i]}(${BASH_SOURCE[$i]}:~${BASH_LINENO[($i-1)]})" >&2
      done
   fi
   # if BASH_SUBSHELL is 0, then script will exit anyway.
   if (( $BASH_SUBSHELL >= 1 ))
   then
      kill $$
   fi
}

function traperrsimple
{
   # Use this function if the above function fails
   echo "ERROR: ${BASH_SOURCE[0]} ${LINENO}" >&2
   # if BASH_SUBSHELL is 0, then script will exit anyway.
   if (( $BASH_SUBSHELL >= 1 ))
   then
      kill $$
   fi
}

set -o errtrace
trap traperr ERR

function errexiton
{
   set -o errexit
   trap traperr ERR
}

function errexitoff
{
   set +o errexit
   trap '' ERR
}
### end stringent.sh

### Script starts here
## Globals
FULLTAG=${FULLTAG:-ghcr.io/openawarenesstraining/openawarenesstraining}
COMMAND=''

if command -v podman &>/dev/null
then
  COMMAND=podman
elif command -v docker &>/dev/null
then
  COMMAND=docker
else
  echo "Unable to find container runner... Exiting"
  exit 1
fi

# set the volume mouting flag
if selinuxenabled
then
  VOLUMEFLAG=':z'
else
  VOLUMEFLAG=''
fi

touch runtime/bash_history
# main
if [[ ${1:-''} == "-debug" ]]
then
  echo ${COMMAND} run --rm -it -v $(pwd)/runtime/bashrc:/root/.bashrc${VOLUMEFLAG} -v $(pwd)/runtime/bash_history:/root/.bash_history${VOLUMEFLAG} -v $(pwd):/opt/source${VOLUMEFLAG} ${FULLTAG} /bin/bash
  exit 1
else
  ${COMMAND} run --rm -it -v $(pwd)/runtime/bashrc:/root/.bashrc${VOLUMEFLAG} -v $(pwd)/runtime/bash_history:/root/.bash_history${VOLUMEFLAG} -v $(pwd):/opt/source${VOLUMEFLAG} ${FULLTAG} /bin/bash
fi
